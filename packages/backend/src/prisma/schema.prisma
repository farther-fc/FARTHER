generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  // Using Farcaster FID as unique identifier
  id        Int       @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  pfpUrl              String?
  username            String?
  displayName         String?
  followerCount       Int?
  powerBadge          Boolean?
  isBanned            Boolean        @default(false)

  allocations         Allocation[]
  tipAllowances       TipAllowance[]
  tipsGiven           Tip[]          @relation(name: "tipper")
  tipsReceived        Tip[]          @relation(name: "tippee")
  openRankScores      OpenRankScore[]
  tipperScores        TipperScore[]

  ethAccounts    UserEthAccount[]

  // Measure of how much the user's tips are clustered around a few users
  clusterCoef    Float?
}

model EthAccount {
  address   String          @id
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  users     UserEthAccount[]
}
model UserEthAccount {
  userId       Int
  ethAccountId String

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ethAccount   EthAccount   @relation(fields: [ethAccountId], references: [address], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, ethAccountId])
}

// Airdrop allocation
model Allocation {
  id        String         @id
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    Int
  user      User           @relation(fields: [userId], references: [id])
  airdropId String?        @db.Uuid
  airdrop   Airdrop?       @relation(fields: [airdropId], references: [id])
  isClaimed Boolean        @default(false)
  type      AllocationType
  amount    String

  // Index of the node in the merkle tree - can stay undefined until the merkle root is calculated
  index Int?

  // This is used by power user & evangelist rewards. The base is assigned to each user 
  // and a bonus is applied based on follower count.
  baseAmount String @default("0")

  // This is used for liquidity rewards to keep track of how much the user claimed onchain. 
  // The amount they get allocated is a multiple of the reference amount.
  referenceAmount String?

  isInvalidated Boolean @default(false)

  // Address of user receiving the allocation - the reason this doesn't live at the user level is we user Neynar &
  // the user's wallet connection, and don't store the recipient's address until an airdrop merkle root is calculated.
  address String?

  tweets   Tweet[]
  tips     Tip[]

  tipperScore TipperScore?

  @@unique([userId, airdropId])
}

enum AllocationType {
  POWER_USER
  EVANGELIST
  LIQUIDITY
  TIPS // tips received
  TIPPER // tipper rewards
}

model Tweet {
  // Using twitter tweet id as the unique identifier
  id            String     @id
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  allocationId  String
  allocation    Allocation @relation(fields: [allocationId], references: [id])
  authorId      String     @default("")
  followerCount Int        @default(0)

  // Each tweet has its own reward, which gets summed to the allocation amount
  reward String
}

// Airdrop
model Airdrop {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // Airdrop creation time == snapshot time
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  chainId   Int
  address   String?
  root      String   @unique
  amount    String
  startTime DateTime
  endTime   DateTime

  allocations Allocation[]

  @@unique([address, chainId])
}

model EcosystemPayment {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  amount      String
  name        String
  description String
  address     String
  txHash      String
}

model Tip {
  hash                 String            @id // Cast hash
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  tipperId             Int
  tipper               User              @relation(name: "tipper", fields: [tipperId], references: [id])
  tippeeId             Int
  tippee               User              @relation(name: "tippee", fields: [tippeeId], references: [id])
  tipAllowanceId       String            @db.Uuid
  tipAllowance         TipAllowance      @relation(fields: [tipAllowanceId], references: [id])
  amount               Float
  invalidTipReason     InvalidTipReason?
  allocationId         String?
  allocation           Allocation?       @relation(fields: [allocationId], references: [id])

  // Tip recipient's change in OpenRank score * Tip.amount
  // This is stored mainly for efficiency reasons so it doesn't need to be recalculated
  openRankChange   Float?

  // Stored at the time the tip is made
  tippeeOpenRankScore  Float?

  @@index([createdAt])
  @@index([tipperId])
  @@index([tippeeId])
  @@index([tipperId, tippeeId])
  @@index([tipAllowanceId])
  @@index([allocationId])
}

enum InvalidTipReason {
  BELOW_MINIMUM
  INSUFFICIENT_ALLOWANCE
  NULL_ALLOWANCE
  INVALID_TIME
  SELF_TIPPING
  BANNED_TIPPER
  BANNED_TIPPEE
  INELIGIBLE_TIPPEE
  TIPPEE_LIMIT_REACHED
}

model TipMeta {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  tipMinimum     Float
  totalAllowance Float
  allowances     TipAllowance[]
  carriedOver    Float
  usdPrice       Float
}

model TipAllowance {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt @default(now())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  tipMetaId     String   @db.Uuid
  tipMeta       TipMeta  @relation(fields: [tipMetaId], references: [id])
  amount        Float
  tips          Tip[]

  // Any unused amount if the tipper became ineligible during the cycle
  invalidatedAmount   Float?

  // Combined balance for all their addresses at the time of the snapshot
  userBalance   String

  @@index([userId])
  @@index([tipMetaId])
}

model TokenPrice {
  id          String   @id // Token address
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  usd         Float    @default(0)   
}

model OpenRankScore {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime @default(now())
  updatedAt       DateTime? @updatedAt
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  score           Float
  scoreNew        Decimal?
  snapshotId      String
  snapshot        OpenRankSnapshot @relation(fields: [snapshotId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@unique([userId, snapshotId])
}

model OpenRankSnapshot {
  id   String @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  scores      OpenRankScore[]
}

model TipperScore {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  score         Float
  allocationId  String?     @unique
  allocation    Allocation? @relation(fields: [allocationId], references: [id])

  @@unique([userId, allocationId])
}