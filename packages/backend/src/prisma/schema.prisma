generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  // Using Farcaster FID as unique identifier
  id        Int      @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  allocations   Allocation[]
  tipAllowances TipAllowance[]
  tipsGiven     Tip[]          @relation(name: "tipper")
  tipsReceived  Tip[]          @relation(name: "tippee")

  // TEMPORARY. TODO: REMOVE
  behavior Int? @default(0)
}

// Airdrop allocation
model Allocation {
  id        String         @id
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    Int
  user      User           @relation(fields: [userId], references: [id])
  airdropId String?        @db.Uuid
  airdrop   Airdrop?       @relation(fields: [airdropId], references: [id])
  isClaimed Boolean        @default(false)
  type      AllocationType
  amount    String

  // Index of the node in the merkle tree - can stay undefined until the merkle root is calculated
  index Int?

  // This is used by power user & evangelist rewards. The base is assigned to each user 
  // and a bonus is applied based on follower count.
  baseAmount String @default("0")

  // This is used for liquidity rewards to keep track of how much the user claimed onchain. 
  // The amount they get allocated is a multiple of the reference amount.
  referenceAmount String?

  isInvalidated Boolean @default(false)

  // Address of user receiving the allocation - the reason this doesn't live at the user level is we user Neynar &
  // the user's wallet connection, and don't store the recipient's address until an airdrop merkle root is calculated.
  address String?

  tweets Tweet[]

  @@unique([userId, airdropId])
}

enum AllocationType {
  POWER_USER
  EVANGELIST
  LIQUIDITY
  TIPS
}

model Tweet {
  // Using twitter tweet id as the unique identifier
  id            String     @id
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  allocationId  String
  allocation    Allocation @relation(fields: [allocationId], references: [id])
  authorId      String     @default("")
  followerCount Int        @default(0)

  // Each tweet has its own reward, which gets summed to the allocation amount
  reward String
}

// Airdrop
model Airdrop {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  // Airdrop creation time == snapshot time
  createdAt DateTime @default(now())
  chainId   Int
  address   String?
  root      String?
  amount    String
  startTime DateTime
  endTime   DateTime

  allocations Allocation[]

  @@unique([address, chainId])
}

model EcosystemPayment {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  amount      String
  name        String
  description String
  address     String
  txHash      String
}

model Tip {
  hash             String            @id // Cast hash
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  tipperId         Int
  tipper           User              @relation(name: "tipper", fields: [tipperId], references: [id])
  tippeeId         Int
  tippee           User              @relation(name: "tippee", fields: [tippeeId], references: [id])
  tipAllowanceId   String            @db.Uuid
  tipAllowance     TipAllowance      @relation(fields: [tipAllowanceId], references: [id])
  amount           Float
  invalidTipReason InvalidTipReason?
}

enum InvalidTipReason {
  BELOW_MINIMUM
  INSUFFICIENT_ALLOWANCE
  NULL_ALLOWANCE
  INVALID_TIME
  SELF_TIPPING
}

model TipMeta {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  tipMinimum     Float
  totalAllowance Float
  allowances     TipAllowance[]
  carriedOver    Float
  usdPrice       Float
}

model TipAllowance {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  tipMetaId String?  @db.Uuid
  tipMeta   TipMeta? @relation(fields: [tipMetaId], references: [id])
  amount    Float
  tips      Tip[]
}

model TokenPrice {
  id          String   @id // Token address
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  usd         Float    @default(0)   
}
