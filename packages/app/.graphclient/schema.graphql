schema {
  query: Query
}

type Query {
  pools(where: PoolWhereInput, orderBy: [PoolOrderByInput!], offset: Int, limit: Int): [Pool!]!
  poolById(id: String!): Pool
  poolByUniqueInput(where: WhereIdInput!): Pool @deprecated(reason: "Use poolById")
  poolsConnection(orderBy: [PoolOrderByInput!]!, after: String, first: Int, where: PoolWhereInput): PoolsConnection!
  accounts(where: AccountWhereInput, orderBy: [AccountOrderByInput!], offset: Int, limit: Int): [Account!]!
  accountById(id: String!): Account
  accountByUniqueInput(where: WhereIdInput!): Account @deprecated(reason: "Use accountById")
  accountsConnection(orderBy: [AccountOrderByInput!]!, after: String, first: Int, where: AccountWhereInput): AccountsConnection!
  positions(where: PositionWhereInput, orderBy: [PositionOrderByInput!], offset: Int, limit: Int): [Position!]!
  positionById(id: String!): Position
  positionByUniqueInput(where: WhereIdInput!): Position @deprecated(reason: "Use positionById")
  positionsConnection(orderBy: [PositionOrderByInput!]!, after: String, first: Int, where: PositionWhereInput): PositionsConnection!
  squidStatus: SquidStatus
}

type Pool {
  """ Smart contract address of the pool """
  id: String!
  """ Creation timestamp """
  createdTimestamp: BigInt!
  """ Creation block number """
  createdBlock: BigInt!
  """ All positions in this market """
  positions(where: PositionWhereInput, orderBy: [PositionOrderByInput!], offset: Int, limit: Int): [Position!]!
}

"""Big number integer"""
scalar BigInt

type Position {
  """NonfungiblePositionManager tokenId"""
  id: String!
  """ Creation timestamp """
  createdTimestamp: BigInt!
  """ Creation block number """
  createdBlock: BigInt!
  """ Account that owns this position (staker contract is ignored, so its always the account that held it most recently other than the staker)
  """
  owner: Account!
  """ The liquidity pool in which this position was opened """
  pool: Pool!
  """ Whether this position is staked in a reward program"""
  isStaked: Boolean
  """ Whether this position is currently being held by the staker contract. This doesn't necessarily mean that the position is staked.
  """
  isHeldByStaker: Boolean
}

type Account {
  """ { Account address } """
  id: String!
  """ Total liquidity rewards claimed by this account"""
  rewardsClaimed: BigInt
  """ All positions that belong to this account """
  positions(where: PositionWhereInput, orderBy: [PositionOrderByInput!], offset: Int, limit: Int): [Position!]!
}

input PositionWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  createdTimestamp_isNull: Boolean
  createdTimestamp_eq: BigInt
  createdTimestamp_not_eq: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlock_isNull: Boolean
  createdBlock_eq: BigInt
  createdBlock_not_eq: BigInt
  createdBlock_gt: BigInt
  createdBlock_gte: BigInt
  createdBlock_lt: BigInt
  createdBlock_lte: BigInt
  createdBlock_in: [BigInt!]
  createdBlock_not_in: [BigInt!]
  owner_isNull: Boolean
  owner: AccountWhereInput
  pool_isNull: Boolean
  pool: PoolWhereInput
  isStaked_isNull: Boolean
  isStaked_eq: Boolean
  isStaked_not_eq: Boolean
  isHeldByStaker_isNull: Boolean
  isHeldByStaker_eq: Boolean
  isHeldByStaker_not_eq: Boolean
  AND: [PositionWhereInput!]
  OR: [PositionWhereInput!]
}

input AccountWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  rewardsClaimed_isNull: Boolean
  rewardsClaimed_eq: BigInt
  rewardsClaimed_not_eq: BigInt
  rewardsClaimed_gt: BigInt
  rewardsClaimed_gte: BigInt
  rewardsClaimed_lt: BigInt
  rewardsClaimed_lte: BigInt
  rewardsClaimed_in: [BigInt!]
  rewardsClaimed_not_in: [BigInt!]
  positions_every: PositionWhereInput
  positions_some: PositionWhereInput
  positions_none: PositionWhereInput
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
}

input PoolWhereInput {
  id_isNull: Boolean
  id_eq: String
  id_not_eq: String
  id_gt: String
  id_gte: String
  id_lt: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_not_contains: String
  id_containsInsensitive: String
  id_not_containsInsensitive: String
  id_startsWith: String
  id_not_startsWith: String
  id_endsWith: String
  id_not_endsWith: String
  createdTimestamp_isNull: Boolean
  createdTimestamp_eq: BigInt
  createdTimestamp_not_eq: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlock_isNull: Boolean
  createdBlock_eq: BigInt
  createdBlock_not_eq: BigInt
  createdBlock_gt: BigInt
  createdBlock_gte: BigInt
  createdBlock_lt: BigInt
  createdBlock_lte: BigInt
  createdBlock_in: [BigInt!]
  createdBlock_not_in: [BigInt!]
  positions_every: PositionWhereInput
  positions_some: PositionWhereInput
  positions_none: PositionWhereInput
  AND: [PoolWhereInput!]
  OR: [PoolWhereInput!]
}

enum PositionOrderByInput {
  id_ASC
  id_DESC
  id_ASC_NULLS_FIRST
  id_DESC_NULLS_LAST
  createdTimestamp_ASC
  createdTimestamp_DESC
  createdTimestamp_ASC_NULLS_FIRST
  createdTimestamp_DESC_NULLS_LAST
  createdBlock_ASC
  createdBlock_DESC
  createdBlock_ASC_NULLS_FIRST
  createdBlock_DESC_NULLS_LAST
  owner_id_ASC
  owner_id_DESC
  owner_id_ASC_NULLS_FIRST
  owner_id_DESC_NULLS_LAST
  owner_rewardsClaimed_ASC
  owner_rewardsClaimed_DESC
  owner_rewardsClaimed_ASC_NULLS_FIRST
  owner_rewardsClaimed_DESC_NULLS_LAST
  pool_id_ASC
  pool_id_DESC
  pool_id_ASC_NULLS_FIRST
  pool_id_DESC_NULLS_LAST
  pool_createdTimestamp_ASC
  pool_createdTimestamp_DESC
  pool_createdTimestamp_ASC_NULLS_FIRST
  pool_createdTimestamp_DESC_NULLS_LAST
  pool_createdBlock_ASC
  pool_createdBlock_DESC
  pool_createdBlock_ASC_NULLS_FIRST
  pool_createdBlock_DESC_NULLS_LAST
  isStaked_ASC
  isStaked_DESC
  isStaked_ASC_NULLS_FIRST
  isStaked_DESC_NULLS_LAST
  isHeldByStaker_ASC
  isHeldByStaker_DESC
  isHeldByStaker_ASC_NULLS_FIRST
  isHeldByStaker_DESC_NULLS_LAST
}

enum PoolOrderByInput {
  id_ASC
  id_DESC
  id_ASC_NULLS_FIRST
  id_DESC_NULLS_LAST
  createdTimestamp_ASC
  createdTimestamp_DESC
  createdTimestamp_ASC_NULLS_FIRST
  createdTimestamp_DESC_NULLS_LAST
  createdBlock_ASC
  createdBlock_DESC
  createdBlock_ASC_NULLS_FIRST
  createdBlock_DESC_NULLS_LAST
}

input WhereIdInput {
  id: String!
}

type PoolsConnection {
  edges: [PoolEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PoolEdge {
  node: Pool!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

enum AccountOrderByInput {
  id_ASC
  id_DESC
  id_ASC_NULLS_FIRST
  id_DESC_NULLS_LAST
  rewardsClaimed_ASC
  rewardsClaimed_DESC
  rewardsClaimed_ASC_NULLS_FIRST
  rewardsClaimed_DESC_NULLS_LAST
}

type AccountsConnection {
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AccountEdge {
  node: Account!
  cursor: String!
}

type PositionsConnection {
  edges: [PositionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PositionEdge {
  node: Position!
  cursor: String!
}

type SquidStatus {
  """The height of the processed part of the chain"""
  height: Int
}