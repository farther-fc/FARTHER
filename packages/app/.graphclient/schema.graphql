schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Account {
  """ { Account address } """
  id: Bytes!
  """ Number of positions this account has """
  positionCount: Int!
  """ All positions that belong to this account """
  positions(skip: Int = 0, first: Int = 100, orderBy: Position_orderBy, orderDirection: OrderDirection, where: Position_filter): [Position!]!
  """ Number of open positions this account has """
  openPositionCount: Int!
  """ Number of closed positions this account has """
  closedPositionCount: Int!
  """ Number of deposits this account made """
  depositCount: Int!
  """ All deposit events of this account """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, where: Deposit_filter): [Deposit!]!
  """ Number of withdrawals this account made """
  withdrawCount: Int!
  """ All withdraw events of this account """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Withdraw_orderBy, orderDirection: OrderDirection, where: Withdraw_filter): [Withdraw!]!
  """ Number of times this account has traded/swapped"""
  swapCount: Int!
  """ All swap events of this account """
  swaps(skip: Int = 0, first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, where: Swap_filter): [Swap!]!
  rewards(skip: Int = 0, first: Int = 100, orderBy: Reward_orderBy, orderDirection: OrderDirection, where: Reward_filter): [Reward!]!
}

input Account_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  positions_: Position_filter
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  deposits_: Deposit_filter
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  withdraws_: Withdraw_filter
  swapCount: Int
  swapCount_not: Int
  swapCount_gt: Int
  swapCount_lt: Int
  swapCount_gte: Int
  swapCount_lte: Int
  swapCount_in: [Int!]
  swapCount_not_in: [Int!]
  swaps_: Swap_filter
  rewards_: Reward_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  or: [Account_filter]
}

enum Account_orderBy {
  id
  positionCount
  positions
  openPositionCount
  closedPositionCount
  depositCount
  deposits
  withdrawCount
  withdraws
  swapCount
  swaps
  rewards
}

type ActiveAccount {
  """ { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch } 
  """
  id: Bytes!
}

input ActiveAccount_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ActiveAccount_filter]
  or: [ActiveAccount_filter]
}

enum ActiveAccount_orderBy {
  id
}

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.

"""
type Deposit {
  """ { Transaction hash }-{ Log index } """
  id: Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: DexAmmProtocol!
  """ Account that emitted this event """
  account: Account!
  """ The user position changed by this event """
  position: Position
  """ The pool involving this event """
  pool: Pool!
  """ lower tick of position """
  tickLower: BigInt
  """ upper tick of position """
  tickUpper: BigInt
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Amount of liquidity minted """
  liquidity: BigInt!
  """ Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]!
  """ Amount of input tokens in the token's native unit """
  inputTokenAmounts: [BigInt!]!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
  """ USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool) 
  """
  amountUSD: BigDecimal!
}

input Deposit_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  hash: Bytes
  hash_not: Bytes
  hash_gt: Bytes
  hash_lt: Bytes
  hash_gte: Bytes
  hash_lte: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Token_filter
  inputTokenAmounts: [BigInt!]
  inputTokenAmounts_not: [BigInt!]
  inputTokenAmounts_contains: [BigInt!]
  inputTokenAmounts_contains_nocase: [BigInt!]
  inputTokenAmounts_not_contains: [BigInt!]
  inputTokenAmounts_not_contains_nocase: [BigInt!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Deposit_filter]
  or: [Deposit_filter]
}

enum Deposit_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  position
  position__id
  position__tokenId
  position__isStaked
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tickLower
  tickUpper
  blockNumber
  timestamp
  liquidity
  inputTokens
  inputTokenAmounts
  reserveAmounts
  amountUSD
}

type DexAmmProtocol implements Protocol {
  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: Bytes!
  """ Name of the protocol, including version. e.g. Uniswap v3 """
  name: String!
  """ Slug of protocol, including version. e.g. uniswap-v3 """
  slug: String!
  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!
  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!
  """ The blockchain network this subgraph is indexing on """
  network: Network!
  """ The type of protocol (e.g. DEX, Lending, Yield, etc) """
  type: ProtocolType!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: BigDecimal!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: BigDecimal!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: BigDecimal!
  """ All protocol-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedProtocolSideValueUSD: BigDecimal!
  """ All supply-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedSupplySideValueUSD: BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: BigDecimal
  """ All historical volume in USD """
  cumulativeVolumeUSD: BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Number of cumulative liquidity providers """
  cumulativeUniqueLPs: Int!
  """ Number of cumulative traders """
  cumulativeUniqueTraders: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Total number of open positions """
  openPositionCount: Int!
  """ Total number of positions (open and closed) """
  cumulativePositionCount: Int!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
  """ Daily usage metrics for this protocol """
  dailyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: UsageMetricsDailySnapshot_orderBy, orderDirection: OrderDirection, where: UsageMetricsDailySnapshot_filter): [UsageMetricsDailySnapshot!]!
  """ Hourly usage metrics for this protocol """
  hourlyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: UsageMetricsHourlySnapshot_orderBy, orderDirection: OrderDirection, where: UsageMetricsHourlySnapshot_filter): [UsageMetricsHourlySnapshot!]!
  """ Daily financial metrics for this protocol """
  financialMetrics(skip: Int = 0, first: Int = 100, orderBy: FinancialsDailySnapshot_orderBy, orderDirection: OrderDirection, where: FinancialsDailySnapshot_filter): [FinancialsDailySnapshot!]!
  """ All pools that belong to this protocol """
  pools(skip: Int = 0, first: Int = 100, orderBy: Pool_orderBy, orderDirection: OrderDirection, where: Pool_filter): [Pool!]!
  """ This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis 
  """
  _regenesis: Boolean!
}

input DexAmmProtocol_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  schemaVersion: String
  schemaVersion_not: String
  schemaVersion_gt: String
  schemaVersion_lt: String
  schemaVersion_gte: String
  schemaVersion_lte: String
  schemaVersion_in: [String!]
  schemaVersion_not_in: [String!]
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  subgraphVersion: String
  subgraphVersion_not: String
  subgraphVersion_gt: String
  subgraphVersion_lt: String
  subgraphVersion_gte: String
  subgraphVersion_lte: String
  subgraphVersion_in: [String!]
  subgraphVersion_not_in: [String!]
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  methodologyVersion: String
  methodologyVersion_not: String
  methodologyVersion_gt: String
  methodologyVersion_lt: String
  methodologyVersion_gte: String
  methodologyVersion_lte: String
  methodologyVersion_in: [String!]
  methodologyVersion_not_in: [String!]
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  network: Network
  network_not: Network
  network_in: [Network!]
  network_not_in: [Network!]
  type: ProtocolType
  type_not: ProtocolType
  type_in: [ProtocolType!]
  type_not_in: [ProtocolType!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  totalLiquidityUSD: BigDecimal
  totalLiquidityUSD_not: BigDecimal
  totalLiquidityUSD_gt: BigDecimal
  totalLiquidityUSD_lt: BigDecimal
  totalLiquidityUSD_gte: BigDecimal
  totalLiquidityUSD_lte: BigDecimal
  totalLiquidityUSD_in: [BigDecimal!]
  totalLiquidityUSD_not_in: [BigDecimal!]
  activeLiquidityUSD: BigDecimal
  activeLiquidityUSD_not: BigDecimal
  activeLiquidityUSD_gt: BigDecimal
  activeLiquidityUSD_lt: BigDecimal
  activeLiquidityUSD_gte: BigDecimal
  activeLiquidityUSD_lte: BigDecimal
  activeLiquidityUSD_in: [BigDecimal!]
  activeLiquidityUSD_not_in: [BigDecimal!]
  uncollectedProtocolSideValueUSD: BigDecimal
  uncollectedProtocolSideValueUSD_not: BigDecimal
  uncollectedProtocolSideValueUSD_gt: BigDecimal
  uncollectedProtocolSideValueUSD_lt: BigDecimal
  uncollectedProtocolSideValueUSD_gte: BigDecimal
  uncollectedProtocolSideValueUSD_lte: BigDecimal
  uncollectedProtocolSideValueUSD_in: [BigDecimal!]
  uncollectedProtocolSideValueUSD_not_in: [BigDecimal!]
  uncollectedSupplySideValueUSD: BigDecimal
  uncollectedSupplySideValueUSD_not: BigDecimal
  uncollectedSupplySideValueUSD_gt: BigDecimal
  uncollectedSupplySideValueUSD_lt: BigDecimal
  uncollectedSupplySideValueUSD_gte: BigDecimal
  uncollectedSupplySideValueUSD_lte: BigDecimal
  uncollectedSupplySideValueUSD_in: [BigDecimal!]
  uncollectedSupplySideValueUSD_not_in: [BigDecimal!]
  protocolControlledValueUSD: BigDecimal
  protocolControlledValueUSD_not: BigDecimal
  protocolControlledValueUSD_gt: BigDecimal
  protocolControlledValueUSD_lt: BigDecimal
  protocolControlledValueUSD_gte: BigDecimal
  protocolControlledValueUSD_lte: BigDecimal
  protocolControlledValueUSD_in: [BigDecimal!]
  protocolControlledValueUSD_not_in: [BigDecimal!]
  cumulativeVolumeUSD: BigDecimal
  cumulativeVolumeUSD_not: BigDecimal
  cumulativeVolumeUSD_gt: BigDecimal
  cumulativeVolumeUSD_lt: BigDecimal
  cumulativeVolumeUSD_gte: BigDecimal
  cumulativeVolumeUSD_lte: BigDecimal
  cumulativeVolumeUSD_in: [BigDecimal!]
  cumulativeVolumeUSD_not_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  cumulativeUniqueLPs: Int
  cumulativeUniqueLPs_not: Int
  cumulativeUniqueLPs_gt: Int
  cumulativeUniqueLPs_lt: Int
  cumulativeUniqueLPs_gte: Int
  cumulativeUniqueLPs_lte: Int
  cumulativeUniqueLPs_in: [Int!]
  cumulativeUniqueLPs_not_in: [Int!]
  cumulativeUniqueTraders: Int
  cumulativeUniqueTraders_not: Int
  cumulativeUniqueTraders_gt: Int
  cumulativeUniqueTraders_lt: Int
  cumulativeUniqueTraders_gte: Int
  cumulativeUniqueTraders_lte: Int
  cumulativeUniqueTraders_in: [Int!]
  cumulativeUniqueTraders_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  cumulativePositionCount: Int
  cumulativePositionCount_not: Int
  cumulativePositionCount_gt: Int
  cumulativePositionCount_lt: Int
  cumulativePositionCount_gte: Int
  cumulativePositionCount_lte: Int
  cumulativePositionCount_in: [Int!]
  cumulativePositionCount_not_in: [Int!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  dailyUsageMetrics_: UsageMetricsDailySnapshot_filter
  hourlyUsageMetrics_: UsageMetricsHourlySnapshot_filter
  financialMetrics_: FinancialsDailySnapshot_filter
  pools_: Pool_filter
  _regenesis: Boolean
  _regenesis_not: Boolean
  _regenesis_in: [Boolean!]
  _regenesis_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DexAmmProtocol_filter]
  or: [DexAmmProtocol_filter]
}

enum DexAmmProtocol_orderBy {
  id
  name
  slug
  schemaVersion
  subgraphVersion
  methodologyVersion
  network
  type
  totalValueLockedUSD
  totalLiquidityUSD
  activeLiquidityUSD
  uncollectedProtocolSideValueUSD
  uncollectedSupplySideValueUSD
  protocolControlledValueUSD
  cumulativeVolumeUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeUniqueUsers
  cumulativeUniqueLPs
  cumulativeUniqueTraders
  totalPoolCount
  openPositionCount
  cumulativePositionCount
  lastSnapshotDayID
  lastUpdateTimestamp
  lastUpdateBlockNumber
  dailyUsageMetrics
  hourlyUsageMetrics
  financialMetrics
  pools
  _regenesis
}

type FinancialsDailySnapshot {
  """ ID is # of days since Unix epoch time """
  id: Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ Protocol this snapshot is associated with """
  protocol: DexAmmProtocol!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: BigDecimal!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: BigDecimal!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: BigDecimal!
  """ All protocol-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedProtocolSideValueUSD: BigDecimal!
  """ All supply-side value locking in USD that remains uncollected and unused in the protocol. 
  """
  uncollectedSupplySideValueUSD: BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: BigDecimal
  """ All trade volume occurred in a given day, in USD """
  dailyVolumeUSD: BigDecimal!
  """ All historical trade volume in USD """
  cumulativeVolumeUSD: BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  dailySupplySideRevenueUSD: BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  dailyProtocolSideRevenueUSD: BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  dailyTotalRevenueUSD: BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input FinancialsDailySnapshot_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: DexAmmProtocol_filter
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  totalLiquidityUSD: BigDecimal
  totalLiquidityUSD_not: BigDecimal
  totalLiquidityUSD_gt: BigDecimal
  totalLiquidityUSD_lt: BigDecimal
  totalLiquidityUSD_gte: BigDecimal
  totalLiquidityUSD_lte: BigDecimal
  totalLiquidityUSD_in: [BigDecimal!]
  totalLiquidityUSD_not_in: [BigDecimal!]
  activeLiquidityUSD: BigDecimal
  activeLiquidityUSD_not: BigDecimal
  activeLiquidityUSD_gt: BigDecimal
  activeLiquidityUSD_lt: BigDecimal
  activeLiquidityUSD_gte: BigDecimal
  activeLiquidityUSD_lte: BigDecimal
  activeLiquidityUSD_in: [BigDecimal!]
  activeLiquidityUSD_not_in: [BigDecimal!]
  uncollectedProtocolSideValueUSD: BigDecimal
  uncollectedProtocolSideValueUSD_not: BigDecimal
  uncollectedProtocolSideValueUSD_gt: BigDecimal
  uncollectedProtocolSideValueUSD_lt: BigDecimal
  uncollectedProtocolSideValueUSD_gte: BigDecimal
  uncollectedProtocolSideValueUSD_lte: BigDecimal
  uncollectedProtocolSideValueUSD_in: [BigDecimal!]
  uncollectedProtocolSideValueUSD_not_in: [BigDecimal!]
  uncollectedSupplySideValueUSD: BigDecimal
  uncollectedSupplySideValueUSD_not: BigDecimal
  uncollectedSupplySideValueUSD_gt: BigDecimal
  uncollectedSupplySideValueUSD_lt: BigDecimal
  uncollectedSupplySideValueUSD_gte: BigDecimal
  uncollectedSupplySideValueUSD_lte: BigDecimal
  uncollectedSupplySideValueUSD_in: [BigDecimal!]
  uncollectedSupplySideValueUSD_not_in: [BigDecimal!]
  protocolControlledValueUSD: BigDecimal
  protocolControlledValueUSD_not: BigDecimal
  protocolControlledValueUSD_gt: BigDecimal
  protocolControlledValueUSD_lt: BigDecimal
  protocolControlledValueUSD_gte: BigDecimal
  protocolControlledValueUSD_lte: BigDecimal
  protocolControlledValueUSD_in: [BigDecimal!]
  protocolControlledValueUSD_not_in: [BigDecimal!]
  dailyVolumeUSD: BigDecimal
  dailyVolumeUSD_not: BigDecimal
  dailyVolumeUSD_gt: BigDecimal
  dailyVolumeUSD_lt: BigDecimal
  dailyVolumeUSD_gte: BigDecimal
  dailyVolumeUSD_lte: BigDecimal
  dailyVolumeUSD_in: [BigDecimal!]
  dailyVolumeUSD_not_in: [BigDecimal!]
  cumulativeVolumeUSD: BigDecimal
  cumulativeVolumeUSD_not: BigDecimal
  cumulativeVolumeUSD_gt: BigDecimal
  cumulativeVolumeUSD_lt: BigDecimal
  cumulativeVolumeUSD_gte: BigDecimal
  cumulativeVolumeUSD_lte: BigDecimal
  cumulativeVolumeUSD_in: [BigDecimal!]
  cumulativeVolumeUSD_not_in: [BigDecimal!]
  dailySupplySideRevenueUSD: BigDecimal
  dailySupplySideRevenueUSD_not: BigDecimal
  dailySupplySideRevenueUSD_gt: BigDecimal
  dailySupplySideRevenueUSD_lt: BigDecimal
  dailySupplySideRevenueUSD_gte: BigDecimal
  dailySupplySideRevenueUSD_lte: BigDecimal
  dailySupplySideRevenueUSD_in: [BigDecimal!]
  dailySupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  dailyProtocolSideRevenueUSD: BigDecimal
  dailyProtocolSideRevenueUSD_not: BigDecimal
  dailyProtocolSideRevenueUSD_gt: BigDecimal
  dailyProtocolSideRevenueUSD_lt: BigDecimal
  dailyProtocolSideRevenueUSD_gte: BigDecimal
  dailyProtocolSideRevenueUSD_lte: BigDecimal
  dailyProtocolSideRevenueUSD_in: [BigDecimal!]
  dailyProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  dailyTotalRevenueUSD: BigDecimal
  dailyTotalRevenueUSD_not: BigDecimal
  dailyTotalRevenueUSD_gt: BigDecimal
  dailyTotalRevenueUSD_lt: BigDecimal
  dailyTotalRevenueUSD_gte: BigDecimal
  dailyTotalRevenueUSD_lte: BigDecimal
  dailyTotalRevenueUSD_in: [BigDecimal!]
  dailyTotalRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FinancialsDailySnapshot_filter]
  or: [FinancialsDailySnapshot_filter]
}

enum FinancialsDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  totalValueLockedUSD
  totalLiquidityUSD
  activeLiquidityUSD
  uncollectedProtocolSideValueUSD
  uncollectedSupplySideValueUSD
  protocolControlledValueUSD
  dailyVolumeUSD
  cumulativeVolumeUSD
  dailySupplySideRevenueUSD
  cumulativeSupplySideRevenueUSD
  dailyProtocolSideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  dailyTotalRevenueUSD
  cumulativeTotalRevenueUSD
  timestamp
  blockNumber
}

"""
8 bytes signed integer

"""
scalar Int8

enum Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BASE
  BOBA
  BSC
  CELO
  COSMOS
  CRONOS
  MAINNET
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC
  XDAI
  SEPOLIA
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Pool {
  """ Smart contract address of the pool """
  id: Bytes!
  """ The protocol this pool belongs to """
  protocol: DexAmmProtocol!
  """ Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT) """
  name: String
  """ Symbol of liquidity pool (e.g. 3CRV) """
  symbol: String
  """ Token that is to represent ownership of liquidity """
  liquidityToken: Token
  """ Type of token used to track liquidity """
  liquidityTokenType: TokenType
  """ Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]!
  """ Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee. ) 
  """
  fees(skip: Int = 0, first: Int = 100, orderBy: PoolFee_orderBy, orderDirection: OrderDirection, where: PoolFee_filter): [PoolFee!]!
  """ Whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol. 
  """
  isSingleSided: Boolean!
  """ Creation timestamp """
  createdTimestamp: BigInt!
  """ Creation block number """
  createdBlockNumber: BigInt!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool in USD """
  totalValueLockedUSD: BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [BigDecimal!]!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: BigDecimal!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [BigDecimal!]!
  """ Total supply of output tokens that are staked. Used to calculate reward APY. 
  """
  stakedTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ All positions in this market """
  positions(skip: Int = 0, first: Int = 100, orderBy: Position_orderBy, orderDirection: OrderDirection, where: Position_filter): [Position!]!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Hour ID of the most recent hourly snapshot """
  lastSnapshotHourID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
  """ Liquidity pool daily snapshots """
  dailySnapshots(skip: Int = 0, first: Int = 100, orderBy: PoolDailySnapshot_orderBy, orderDirection: OrderDirection, where: PoolDailySnapshot_filter): [PoolDailySnapshot!]!
  """ Liquidity pool hourly snapshots """
  hourlySnapshots(skip: Int = 0, first: Int = 100, orderBy: PoolHourlySnapshot_orderBy, orderDirection: OrderDirection, where: PoolHourlySnapshot_filter): [PoolHourlySnapshot!]!
  """ All deposit (add liquidity) events occurred in this pool """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, where: Deposit_filter): [Deposit!]!
  """ All withdraw (remove liquidity) events occurred in this pool """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Withdraw_orderBy, orderDirection: OrderDirection, where: Withdraw_filter): [Withdraw!]!
  """ All trade (swap) events occurred in this pool """
  swaps(skip: Int = 0, first: Int = 100, orderBy: Swap_orderBy, orderDirection: OrderDirection, where: Swap_filter): [Swap!]!
}

type PoolDailySnapshot {
  """ { Smart contract address of the pool }-{ # of days since Unix epoch time } 
  """
  id: Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ The protocol this snapshot belongs to """
  protocol: DexAmmProtocol!
  """ The pool this snapshot belongs to """
  pool: Pool!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool """
  totalValueLockedUSD: BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ Daily revenue generated by the liquidity pool, accrued to the supply side. 
  """
  dailySupplySideRevenueUSD: BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ Daily revenue generated by the liquidity pool, accrued to the protocol. 
  """
  dailyProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ Daily revenue generated by the liquidity pool. """
  dailyTotalRevenueUSD: BigDecimal!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: BigDecimal!
  """ All trade volume occurred in a given day, in USD """
  dailyVolumeUSD: BigDecimal!
  """ All trade volume , in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  dailyVolumeByTokenAmount: [BigInt!]!
  """ All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [BigDecimal!]!
  """ All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  dailyVolumeByTokenUSD: [BigDecimal!]!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [BigDecimal!]!
  """ Total supply of output tokens that are staked. Used to calculate reward APY. 
  """
  stakedTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of deposits (add liquidity) in a day """
  dailyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of withdrawals (remove liquidity) in a day """
  dailyWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ Total number of trades (swaps) in a day """
  dailySwapCount: Int!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input PoolDailySnapshot_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: DexAmmProtocol_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: BigDecimal
  totalLiquidityUSD_not: BigDecimal
  totalLiquidityUSD_gt: BigDecimal
  totalLiquidityUSD_lt: BigDecimal
  totalLiquidityUSD_gte: BigDecimal
  totalLiquidityUSD_lte: BigDecimal
  totalLiquidityUSD_in: [BigDecimal!]
  totalLiquidityUSD_not_in: [BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: BigDecimal
  activeLiquidityUSD_not: BigDecimal
  activeLiquidityUSD_gt: BigDecimal
  activeLiquidityUSD_lt: BigDecimal
  activeLiquidityUSD_gte: BigDecimal
  activeLiquidityUSD_lte: BigDecimal
  activeLiquidityUSD_in: [BigDecimal!]
  activeLiquidityUSD_not_in: [BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [BigDecimal!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  dailySupplySideRevenueUSD: BigDecimal
  dailySupplySideRevenueUSD_not: BigDecimal
  dailySupplySideRevenueUSD_gt: BigDecimal
  dailySupplySideRevenueUSD_lt: BigDecimal
  dailySupplySideRevenueUSD_gte: BigDecimal
  dailySupplySideRevenueUSD_lte: BigDecimal
  dailySupplySideRevenueUSD_in: [BigDecimal!]
  dailySupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  dailyProtocolSideRevenueUSD: BigDecimal
  dailyProtocolSideRevenueUSD_not: BigDecimal
  dailyProtocolSideRevenueUSD_gt: BigDecimal
  dailyProtocolSideRevenueUSD_lt: BigDecimal
  dailyProtocolSideRevenueUSD_gte: BigDecimal
  dailyProtocolSideRevenueUSD_lte: BigDecimal
  dailyProtocolSideRevenueUSD_in: [BigDecimal!]
  dailyProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  dailyTotalRevenueUSD: BigDecimal
  dailyTotalRevenueUSD_not: BigDecimal
  dailyTotalRevenueUSD_gt: BigDecimal
  dailyTotalRevenueUSD_lt: BigDecimal
  dailyTotalRevenueUSD_gte: BigDecimal
  dailyTotalRevenueUSD_lte: BigDecimal
  dailyTotalRevenueUSD_in: [BigDecimal!]
  dailyTotalRevenueUSD_not_in: [BigDecimal!]
  cumulativeVolumeUSD: BigDecimal
  cumulativeVolumeUSD_not: BigDecimal
  cumulativeVolumeUSD_gt: BigDecimal
  cumulativeVolumeUSD_lt: BigDecimal
  cumulativeVolumeUSD_gte: BigDecimal
  cumulativeVolumeUSD_lte: BigDecimal
  cumulativeVolumeUSD_in: [BigDecimal!]
  cumulativeVolumeUSD_not_in: [BigDecimal!]
  dailyVolumeUSD: BigDecimal
  dailyVolumeUSD_not: BigDecimal
  dailyVolumeUSD_gt: BigDecimal
  dailyVolumeUSD_lt: BigDecimal
  dailyVolumeUSD_gte: BigDecimal
  dailyVolumeUSD_lte: BigDecimal
  dailyVolumeUSD_in: [BigDecimal!]
  dailyVolumeUSD_not_in: [BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  dailyVolumeByTokenAmount: [BigInt!]
  dailyVolumeByTokenAmount_not: [BigInt!]
  dailyVolumeByTokenAmount_contains: [BigInt!]
  dailyVolumeByTokenAmount_contains_nocase: [BigInt!]
  dailyVolumeByTokenAmount_not_contains: [BigInt!]
  dailyVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [BigDecimal!]
  dailyVolumeByTokenUSD: [BigDecimal!]
  dailyVolumeByTokenUSD_not: [BigDecimal!]
  dailyVolumeByTokenUSD_contains: [BigDecimal!]
  dailyVolumeByTokenUSD_contains_nocase: [BigDecimal!]
  dailyVolumeByTokenUSD_not_contains: [BigDecimal!]
  dailyVolumeByTokenUSD_not_contains_nocase: [BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [BigDecimal!]
  inputTokenBalancesUSD_not: [BigDecimal!]
  inputTokenBalancesUSD_contains: [BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [BigDecimal!]
  inputTokenBalancesUSD_not_contains: [BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [BigDecimal!]
  stakedTokenAmount: BigInt
  stakedTokenAmount_not: BigInt
  stakedTokenAmount_gt: BigInt
  stakedTokenAmount_lt: BigInt
  stakedTokenAmount_gte: BigInt
  stakedTokenAmount_lte: BigInt
  stakedTokenAmount_in: [BigInt!]
  stakedTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [BigDecimal!]
  rewardTokenEmissionsUSD_not: [BigDecimal!]
  rewardTokenEmissionsUSD_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  dailyDepositCount: Int
  dailyDepositCount_not: Int
  dailyDepositCount_gt: Int
  dailyDepositCount_lt: Int
  dailyDepositCount_gte: Int
  dailyDepositCount_lte: Int
  dailyDepositCount_in: [Int!]
  dailyDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  dailyWithdrawCount: Int
  dailyWithdrawCount_not: Int
  dailyWithdrawCount_gt: Int
  dailyWithdrawCount_lt: Int
  dailyWithdrawCount_gte: Int
  dailyWithdrawCount_lte: Int
  dailyWithdrawCount_in: [Int!]
  dailyWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  dailySwapCount: Int
  dailySwapCount_not: Int
  dailySwapCount_gt: Int
  dailySwapCount_lt: Int
  dailySwapCount_gte: Int
  dailySwapCount_lte: Int
  dailySwapCount_in: [Int!]
  dailySwapCount_not_in: [Int!]
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolDailySnapshot_filter]
  or: [PoolDailySnapshot_filter]
}

enum PoolDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  dailySupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  dailyProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  dailyTotalRevenueUSD
  cumulativeVolumeUSD
  dailyVolumeUSD
  cumulativeVolumeByTokenAmount
  dailyVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  dailyVolumeByTokenUSD
  inputTokenBalances
  inputTokenBalancesUSD
  stakedTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  dailyDepositCount
  cumulativeWithdrawCount
  dailyWithdrawCount
  cumulativeSwapCount
  dailySwapCount
  positionCount
  openPositionCount
  closedPositionCount
  timestamp
  blockNumber
}

type PoolFee {
  """ { Fee type }-{ Pool address } """
  id: Bytes!
  """ Fee as a percentage of the trade (swap) amount. Does not always apply 
  """
  feePercentage: BigDecimal
  """ Type of fee this pool uses """
  feeType: PoolFeeType!
}

enum PoolFeeType {
  """ Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1. 
  """
  FIXED_TRADING_FEE
  """ Some protocols use tiered fees instead of fixed fee (e.g. DYDX, DODO). Set `feePercentage` as 0 but handle the tiered fees in the mapping code. 
  """
  TIERED_TRADING_FEE
  """ Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_TRADING_FEE
  """ Fixed fee that's paid to the LP, as a percentage of the traded amount. e.g. 0.25% for Sushiswap, 0.02% for Curve v1. 
  """
  FIXED_LP_FEE
  """ Some protocols use dynamic LP fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_LP_FEE
  """ Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 0.05% for Sushiswap, 0.02% for Curve v1. 
  """
  FIXED_PROTOCOL_FEE
  """ Some protocols use dynamic protocol fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. 
  """
  DYNAMIC_PROTOCOL_FEE
  """ One-time fee charged by the protocol during deposit, in percentages of the deposit token 
  """
  DEPOSIT_FEE
  """ One-time fee charged by the protocol (e.g. Bancor v3) during withdrawal, in percentages of the withdrawal token 
  """
  WITHDRAWAL_FEE
}

input PoolFee_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  feePercentage: BigDecimal
  feePercentage_not: BigDecimal
  feePercentage_gt: BigDecimal
  feePercentage_lt: BigDecimal
  feePercentage_gte: BigDecimal
  feePercentage_lte: BigDecimal
  feePercentage_in: [BigDecimal!]
  feePercentage_not_in: [BigDecimal!]
  feeType: PoolFeeType
  feeType_not: PoolFeeType
  feeType_in: [PoolFeeType!]
  feeType_not_in: [PoolFeeType!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolFee_filter]
  or: [PoolFee_filter]
}

enum PoolFee_orderBy {
  id
  feePercentage
  feeType
}

type PoolHourlySnapshot {
  """ { Smart contract address of the pool }-{ # of hours since Unix epoch time } 
  """
  id: Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ The protocol this snapshot belongs to """
  protocol: DexAmmProtocol!
  """ The pool this snapshot belongs to """
  pool: Pool!
  """ Current tick representing the price of token0/token1 """
  tick: BigInt
  """ Current TVL (Total Value Locked) of this pool """
  totalValueLockedUSD: BigDecimal!
  """ The sum of all active and non-active liquidity for this pool. """
  totalLiquidity: BigInt!
  """ The sum of all active and non-active liquidity in USD for this pool. """
  totalLiquidityUSD: BigDecimal!
  """ All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidity: BigInt!
  """ All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. 
  """
  activeLiquidityUSD: BigDecimal!
  """ All protocol-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideTokenAmounts: [BigInt!]!
  """ All protocol-side value locking in USD that remains uncollected and unused in the pool. 
  """
  uncollectedProtocolSideValuesUSD: [BigDecimal!]!
  """ All supply-side value locked in token amounts that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideTokenAmounts: [BigInt!]!
  """ All supply-side value locked in USD that remains uncollected and unused in the pool. 
  """
  uncollectedSupplySideValuesUSD: [BigDecimal!]!
  """ All revenue generated by the liquidity pool, accrued to the supply side. 
  """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ Hourly revenue generated by the liquidity pool, accrued to the supply side. 
  """
  hourlySupplySideRevenueUSD: BigDecimal!
  """ All revenue generated by the liquidity pool, accrued to the protocol. 
  """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ Hourly revenue generated by the liquidity pool, accrued to the protocol. 
  """
  hourlyProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the liquidity pool. """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ Hourly revenue generated by the liquidity pool. """
  hourlyTotalRevenueUSD: BigDecimal!
  """ All historical trade volume occurred in this pool, in USD """
  cumulativeVolumeUSD: BigDecimal!
  """ All trade volume occurred in a given hour, in USD """
  hourlyVolumeUSD: BigDecimal!
  """ All trade volume, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenAmount: [BigInt!]!
  """ All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. 
  """
  hourlyVolumeByTokenAmount: [BigInt!]!
  """ All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  cumulativeVolumeByTokenUSD: [BigDecimal!]!
  """ All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. 
  """
  hourlyVolumeByTokenUSD: [BigDecimal!]!
  """ Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalances: [BigInt!]!
  """ Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. 
  """
  inputTokenBalancesUSD: [BigDecimal!]!
  """ Total supply of output tokens that are staked. Used to calculate reward APY. 
  """
  stakedTokenAmount: BigInt
  """ Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [BigDecimal!]
  """ Total number of deposits (add liquidity) """
  cumulativeDepositCount: Int!
  """ Total number of deposits (add liquidity) in an hour """
  hourlyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) """
  cumulativeWithdrawCount: Int!
  """ Total number of withdrawals (remove liquidity) in an hour """
  hourlyWithdrawCount: Int!
  """ Total number of trades (swaps) """
  cumulativeSwapCount: Int!
  """ Total number of trades (swaps) in an hour """
  hourlySwapCount: Int!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input PoolHourlySnapshot_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: DexAmmProtocol_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: BigDecimal
  totalLiquidityUSD_not: BigDecimal
  totalLiquidityUSD_gt: BigDecimal
  totalLiquidityUSD_lt: BigDecimal
  totalLiquidityUSD_gte: BigDecimal
  totalLiquidityUSD_lte: BigDecimal
  totalLiquidityUSD_in: [BigDecimal!]
  totalLiquidityUSD_not_in: [BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: BigDecimal
  activeLiquidityUSD_not: BigDecimal
  activeLiquidityUSD_gt: BigDecimal
  activeLiquidityUSD_lt: BigDecimal
  activeLiquidityUSD_gte: BigDecimal
  activeLiquidityUSD_lte: BigDecimal
  activeLiquidityUSD_in: [BigDecimal!]
  activeLiquidityUSD_not_in: [BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [BigDecimal!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  hourlySupplySideRevenueUSD: BigDecimal
  hourlySupplySideRevenueUSD_not: BigDecimal
  hourlySupplySideRevenueUSD_gt: BigDecimal
  hourlySupplySideRevenueUSD_lt: BigDecimal
  hourlySupplySideRevenueUSD_gte: BigDecimal
  hourlySupplySideRevenueUSD_lte: BigDecimal
  hourlySupplySideRevenueUSD_in: [BigDecimal!]
  hourlySupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  hourlyProtocolSideRevenueUSD: BigDecimal
  hourlyProtocolSideRevenueUSD_not: BigDecimal
  hourlyProtocolSideRevenueUSD_gt: BigDecimal
  hourlyProtocolSideRevenueUSD_lt: BigDecimal
  hourlyProtocolSideRevenueUSD_gte: BigDecimal
  hourlyProtocolSideRevenueUSD_lte: BigDecimal
  hourlyProtocolSideRevenueUSD_in: [BigDecimal!]
  hourlyProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  hourlyTotalRevenueUSD: BigDecimal
  hourlyTotalRevenueUSD_not: BigDecimal
  hourlyTotalRevenueUSD_gt: BigDecimal
  hourlyTotalRevenueUSD_lt: BigDecimal
  hourlyTotalRevenueUSD_gte: BigDecimal
  hourlyTotalRevenueUSD_lte: BigDecimal
  hourlyTotalRevenueUSD_in: [BigDecimal!]
  hourlyTotalRevenueUSD_not_in: [BigDecimal!]
  cumulativeVolumeUSD: BigDecimal
  cumulativeVolumeUSD_not: BigDecimal
  cumulativeVolumeUSD_gt: BigDecimal
  cumulativeVolumeUSD_lt: BigDecimal
  cumulativeVolumeUSD_gte: BigDecimal
  cumulativeVolumeUSD_lte: BigDecimal
  cumulativeVolumeUSD_in: [BigDecimal!]
  cumulativeVolumeUSD_not_in: [BigDecimal!]
  hourlyVolumeUSD: BigDecimal
  hourlyVolumeUSD_not: BigDecimal
  hourlyVolumeUSD_gt: BigDecimal
  hourlyVolumeUSD_lt: BigDecimal
  hourlyVolumeUSD_gte: BigDecimal
  hourlyVolumeUSD_lte: BigDecimal
  hourlyVolumeUSD_in: [BigDecimal!]
  hourlyVolumeUSD_not_in: [BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  hourlyVolumeByTokenAmount: [BigInt!]
  hourlyVolumeByTokenAmount_not: [BigInt!]
  hourlyVolumeByTokenAmount_contains: [BigInt!]
  hourlyVolumeByTokenAmount_contains_nocase: [BigInt!]
  hourlyVolumeByTokenAmount_not_contains: [BigInt!]
  hourlyVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [BigDecimal!]
  hourlyVolumeByTokenUSD: [BigDecimal!]
  hourlyVolumeByTokenUSD_not: [BigDecimal!]
  hourlyVolumeByTokenUSD_contains: [BigDecimal!]
  hourlyVolumeByTokenUSD_contains_nocase: [BigDecimal!]
  hourlyVolumeByTokenUSD_not_contains: [BigDecimal!]
  hourlyVolumeByTokenUSD_not_contains_nocase: [BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [BigDecimal!]
  inputTokenBalancesUSD_not: [BigDecimal!]
  inputTokenBalancesUSD_contains: [BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [BigDecimal!]
  inputTokenBalancesUSD_not_contains: [BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [BigDecimal!]
  stakedTokenAmount: BigInt
  stakedTokenAmount_not: BigInt
  stakedTokenAmount_gt: BigInt
  stakedTokenAmount_lt: BigInt
  stakedTokenAmount_gte: BigInt
  stakedTokenAmount_lte: BigInt
  stakedTokenAmount_in: [BigInt!]
  stakedTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [BigDecimal!]
  rewardTokenEmissionsUSD_not: [BigDecimal!]
  rewardTokenEmissionsUSD_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  hourlyDepositCount: Int
  hourlyDepositCount_not: Int
  hourlyDepositCount_gt: Int
  hourlyDepositCount_lt: Int
  hourlyDepositCount_gte: Int
  hourlyDepositCount_lte: Int
  hourlyDepositCount_in: [Int!]
  hourlyDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  hourlyWithdrawCount: Int
  hourlyWithdrawCount_not: Int
  hourlyWithdrawCount_gt: Int
  hourlyWithdrawCount_lt: Int
  hourlyWithdrawCount_gte: Int
  hourlyWithdrawCount_lte: Int
  hourlyWithdrawCount_in: [Int!]
  hourlyWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  hourlySwapCount: Int
  hourlySwapCount_not: Int
  hourlySwapCount_gt: Int
  hourlySwapCount_lt: Int
  hourlySwapCount_gte: Int
  hourlySwapCount_lte: Int
  hourlySwapCount_in: [Int!]
  hourlySwapCount_not_in: [Int!]
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolHourlySnapshot_filter]
  or: [PoolHourlySnapshot_filter]
}

enum PoolHourlySnapshot_orderBy {
  id
  hour
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  hourlySupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  hourlyProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  hourlyTotalRevenueUSD
  cumulativeVolumeUSD
  hourlyVolumeUSD
  cumulativeVolumeByTokenAmount
  hourlyVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  hourlyVolumeByTokenUSD
  inputTokenBalances
  inputTokenBalancesUSD
  stakedTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  hourlyDepositCount
  cumulativeWithdrawCount
  hourlyWithdrawCount
  cumulativeSwapCount
  hourlySwapCount
  positionCount
  openPositionCount
  closedPositionCount
  timestamp
  blockNumber
}

input Pool_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: DexAmmProtocol_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  liquidityToken: String
  liquidityToken_not: String
  liquidityToken_gt: String
  liquidityToken_lt: String
  liquidityToken_gte: String
  liquidityToken_lte: String
  liquidityToken_in: [String!]
  liquidityToken_not_in: [String!]
  liquidityToken_contains: String
  liquidityToken_contains_nocase: String
  liquidityToken_not_contains: String
  liquidityToken_not_contains_nocase: String
  liquidityToken_starts_with: String
  liquidityToken_starts_with_nocase: String
  liquidityToken_not_starts_with: String
  liquidityToken_not_starts_with_nocase: String
  liquidityToken_ends_with: String
  liquidityToken_ends_with_nocase: String
  liquidityToken_not_ends_with: String
  liquidityToken_not_ends_with_nocase: String
  liquidityToken_: Token_filter
  liquidityTokenType: TokenType
  liquidityTokenType_not: TokenType
  liquidityTokenType_in: [TokenType!]
  liquidityTokenType_not_in: [TokenType!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Token_filter
  fees: [String!]
  fees_not: [String!]
  fees_contains: [String!]
  fees_contains_nocase: [String!]
  fees_not_contains: [String!]
  fees_not_contains_nocase: [String!]
  fees_: PoolFee_filter
  isSingleSided: Boolean
  isSingleSided_not: Boolean
  isSingleSided_in: [Boolean!]
  isSingleSided_not_in: [Boolean!]
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalLiquidityUSD: BigDecimal
  totalLiquidityUSD_not: BigDecimal
  totalLiquidityUSD_gt: BigDecimal
  totalLiquidityUSD_lt: BigDecimal
  totalLiquidityUSD_gte: BigDecimal
  totalLiquidityUSD_lte: BigDecimal
  totalLiquidityUSD_in: [BigDecimal!]
  totalLiquidityUSD_not_in: [BigDecimal!]
  activeLiquidity: BigInt
  activeLiquidity_not: BigInt
  activeLiquidity_gt: BigInt
  activeLiquidity_lt: BigInt
  activeLiquidity_gte: BigInt
  activeLiquidity_lte: BigInt
  activeLiquidity_in: [BigInt!]
  activeLiquidity_not_in: [BigInt!]
  activeLiquidityUSD: BigDecimal
  activeLiquidityUSD_not: BigDecimal
  activeLiquidityUSD_gt: BigDecimal
  activeLiquidityUSD_lt: BigDecimal
  activeLiquidityUSD_gte: BigDecimal
  activeLiquidityUSD_lte: BigDecimal
  activeLiquidityUSD_in: [BigDecimal!]
  activeLiquidityUSD_not_in: [BigDecimal!]
  uncollectedProtocolSideTokenAmounts: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains: [BigInt!]
  uncollectedProtocolSideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedProtocolSideValuesUSD: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_not: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_contains_nocase: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains: [BigDecimal!]
  uncollectedProtocolSideValuesUSD_not_contains_nocase: [BigDecimal!]
  uncollectedSupplySideTokenAmounts: [BigInt!]
  uncollectedSupplySideTokenAmounts_not: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_contains_nocase: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains: [BigInt!]
  uncollectedSupplySideTokenAmounts_not_contains_nocase: [BigInt!]
  uncollectedSupplySideValuesUSD: [BigDecimal!]
  uncollectedSupplySideValuesUSD_not: [BigDecimal!]
  uncollectedSupplySideValuesUSD_contains: [BigDecimal!]
  uncollectedSupplySideValuesUSD_contains_nocase: [BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains: [BigDecimal!]
  uncollectedSupplySideValuesUSD_not_contains_nocase: [BigDecimal!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  cumulativeVolumeByTokenAmount: [BigInt!]
  cumulativeVolumeByTokenAmount_not: [BigInt!]
  cumulativeVolumeByTokenAmount_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains: [BigInt!]
  cumulativeVolumeByTokenAmount_not_contains_nocase: [BigInt!]
  cumulativeVolumeByTokenUSD: [BigDecimal!]
  cumulativeVolumeByTokenUSD_not: [BigDecimal!]
  cumulativeVolumeByTokenUSD_contains: [BigDecimal!]
  cumulativeVolumeByTokenUSD_contains_nocase: [BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains: [BigDecimal!]
  cumulativeVolumeByTokenUSD_not_contains_nocase: [BigDecimal!]
  cumulativeVolumeUSD: BigDecimal
  cumulativeVolumeUSD_not: BigDecimal
  cumulativeVolumeUSD_gt: BigDecimal
  cumulativeVolumeUSD_lt: BigDecimal
  cumulativeVolumeUSD_gte: BigDecimal
  cumulativeVolumeUSD_lte: BigDecimal
  cumulativeVolumeUSD_in: [BigDecimal!]
  cumulativeVolumeUSD_not_in: [BigDecimal!]
  inputTokenBalances: [BigInt!]
  inputTokenBalances_not: [BigInt!]
  inputTokenBalances_contains: [BigInt!]
  inputTokenBalances_contains_nocase: [BigInt!]
  inputTokenBalances_not_contains: [BigInt!]
  inputTokenBalances_not_contains_nocase: [BigInt!]
  inputTokenBalancesUSD: [BigDecimal!]
  inputTokenBalancesUSD_not: [BigDecimal!]
  inputTokenBalancesUSD_contains: [BigDecimal!]
  inputTokenBalancesUSD_contains_nocase: [BigDecimal!]
  inputTokenBalancesUSD_not_contains: [BigDecimal!]
  inputTokenBalancesUSD_not_contains_nocase: [BigDecimal!]
  stakedTokenAmount: BigInt
  stakedTokenAmount_not: BigInt
  stakedTokenAmount_gt: BigInt
  stakedTokenAmount_lt: BigInt
  stakedTokenAmount_gte: BigInt
  stakedTokenAmount_lte: BigInt
  stakedTokenAmount_in: [BigInt!]
  stakedTokenAmount_not_in: [BigInt!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [BigDecimal!]
  rewardTokenEmissionsUSD_not: [BigDecimal!]
  rewardTokenEmissionsUSD_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [BigDecimal!]
  cumulativeDepositCount: Int
  cumulativeDepositCount_not: Int
  cumulativeDepositCount_gt: Int
  cumulativeDepositCount_lt: Int
  cumulativeDepositCount_gte: Int
  cumulativeDepositCount_lte: Int
  cumulativeDepositCount_in: [Int!]
  cumulativeDepositCount_not_in: [Int!]
  cumulativeWithdrawCount: Int
  cumulativeWithdrawCount_not: Int
  cumulativeWithdrawCount_gt: Int
  cumulativeWithdrawCount_lt: Int
  cumulativeWithdrawCount_gte: Int
  cumulativeWithdrawCount_lte: Int
  cumulativeWithdrawCount_in: [Int!]
  cumulativeWithdrawCount_not_in: [Int!]
  cumulativeSwapCount: Int
  cumulativeSwapCount_not: Int
  cumulativeSwapCount_gt: Int
  cumulativeSwapCount_lt: Int
  cumulativeSwapCount_gte: Int
  cumulativeSwapCount_lte: Int
  cumulativeSwapCount_in: [Int!]
  cumulativeSwapCount_not_in: [Int!]
  positions_: Position_filter
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastSnapshotHourID: Int
  lastSnapshotHourID_not: Int
  lastSnapshotHourID_gt: Int
  lastSnapshotHourID_lt: Int
  lastSnapshotHourID_gte: Int
  lastSnapshotHourID_lte: Int
  lastSnapshotHourID_in: [Int!]
  lastSnapshotHourID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  dailySnapshots_: PoolDailySnapshot_filter
  hourlySnapshots_: PoolHourlySnapshot_filter
  deposits_: Deposit_filter
  withdraws_: Withdraw_filter
  swaps_: Swap_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pool_filter]
  or: [Pool_filter]
}

enum Pool_orderBy {
  id
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  name
  symbol
  liquidityToken
  liquidityToken__id
  liquidityToken__name
  liquidityToken__symbol
  liquidityToken__decimals
  liquidityToken__lastPriceUSD
  liquidityToken__lastPriceBlockNumber
  liquidityToken___lastPricePool
  liquidityToken___totalSupply
  liquidityToken___totalValueLockedUSD
  liquidityToken___largePriceChangeBuffer
  liquidityToken___largeTVLImpactBuffer
  liquidityTokenType
  inputTokens
  fees
  isSingleSided
  createdTimestamp
  createdBlockNumber
  tick
  totalValueLockedUSD
  totalLiquidity
  totalLiquidityUSD
  activeLiquidity
  activeLiquidityUSD
  uncollectedProtocolSideTokenAmounts
  uncollectedProtocolSideValuesUSD
  uncollectedSupplySideTokenAmounts
  uncollectedSupplySideValuesUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeVolumeByTokenAmount
  cumulativeVolumeByTokenUSD
  cumulativeVolumeUSD
  inputTokenBalances
  inputTokenBalancesUSD
  stakedTokenAmount
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  cumulativeDepositCount
  cumulativeWithdrawCount
  cumulativeSwapCount
  positions
  positionCount
  openPositionCount
  closedPositionCount
  lastSnapshotDayID
  lastSnapshotHourID
  lastUpdateTimestamp
  lastUpdateBlockNumber
  dailySnapshots
  hourlySnapshots
  deposits
  withdraws
  swaps
}

type Position {
  id: Bytes!
  """NonfungiblePositionManager tokenId"""
  tokenId: BigInt!
  """ Account that owns this position """
  account: Account!
  """ The liquidity pool in which this position was opened """
  pool: Pool!
  """ Whether this position is staked in a reward program"""
  isStaked: Boolean!
  """ The hash of the transaction that opened this position """
  hashOpened: Bytes!
  """ The hash of the transaction that closed this position """
  hashClosed: Bytes
  """ Block number of when the position was opened """
  blockNumberOpened: BigInt!
  """ Timestamp when the position was opened """
  timestampOpened: BigInt!
  """ Block number of when the position was closed (0 if still open) """
  blockNumberClosed: BigInt
  """ Timestamp when the position was closed (0 if still open) """
  timestampClosed: BigInt
  """ lower tick of the position """
  tickLower: Tick
  """ upper tick of the position """
  tickUpper: Tick
  """ Token that is to represent ownership of liquidity """
  liquidityToken: Token
  """ Type of token used to track liquidity """
  liquidityTokenType: TokenType
  """ total position liquidity """
  liquidity: BigInt!
  """ total position liquidity in USD """
  liquidityUSD: BigDecimal!
  """ amount of tokens ever deposited to position """
  cumulativeDepositTokenAmounts: [BigInt!]!
  """ amount of tokens in USD deposited to position """
  cumulativeDepositUSD: BigDecimal!
  """ amount of tokens ever withdrawn from position (without fees) """
  cumulativeWithdrawTokenAmounts: [BigInt!]!
  """ amount of tokens in USD withdrawn from position (without fees) """
  cumulativeWithdrawUSD: BigDecimal!
  """ Total reward token accumulated under this position, in USD """
  cumulativeRewardUSD: [BigInt!]
  """ Number of deposits related to this position """
  depositCount: Int!
  """ All deposit events of this position """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, where: Deposit_filter): [Deposit!]!
  """ Number of withdrawals related to this position """
  withdrawCount: Int!
  """ All withdraw events of this position """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Withdraw_orderBy, orderDirection: OrderDirection, where: Withdraw_filter): [Withdraw!]!
  """ Position daily snapshots for open positions """
  snapshots(skip: Int = 0, first: Int = 100, orderBy: PositionSnapshot_orderBy, orderDirection: OrderDirection, where: PositionSnapshot_filter): [PositionSnapshot!]!
}

type PositionSnapshot {
  """ { Position ID }-{ Transaction hash }-{ Log index } """
  id: Bytes!
  """ Transaction hash of the transaction that triggered this snapshot """
  hash: Bytes!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Nonce of the transaction that triggered this snapshot """
  nonce: BigInt!
  """ Position of this snapshot """
  position: Position!
  """ Type of token used to track liquidity """
  liquidityTokenType: TokenType
  """ total position liquidity """
  liquidity: BigInt
  """ total position liquidity in USD """
  liquidityUSD: BigDecimal
  """ amount of tokens ever deposited to position """
  cumulativeDepositTokenAmounts: [BigInt!]!
  """ amount of tokens in USD deposited to position """
  cumulativeDepositUSD: BigDecimal!
  """ amount of tokens ever withdrawn from position (without fees) """
  cumulativeWithdrawTokenAmounts: [BigInt!]!
  """ amount of tokens in USD withdrawn from position (without fees) """
  cumulativeWithdrawUSD: BigDecimal!
  """ Total reward token accumulated under this position, in native amounts 
  """
  cumulativeRewardTokenAmounts: [BigInt!]
  """ Total reward token accumulated under this position, in USD """
  cumulativeRewardUSD: [BigInt!]
  """ Number of deposits related to this position """
  depositCount: Int!
  """ Number of withdrawals related to this position """
  withdrawCount: Int!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
}

input PositionSnapshot_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  hash: Bytes
  hash_not: Bytes
  hash_gt: Bytes
  hash_lt: Bytes
  hash_gte: Bytes
  hash_lte: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  liquidityTokenType: TokenType
  liquidityTokenType_not: TokenType
  liquidityTokenType_in: [TokenType!]
  liquidityTokenType_not_in: [TokenType!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  cumulativeDepositTokenAmounts: [BigInt!]
  cumulativeDepositTokenAmounts_not: [BigInt!]
  cumulativeDepositTokenAmounts_contains: [BigInt!]
  cumulativeDepositTokenAmounts_contains_nocase: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeDepositUSD: BigDecimal
  cumulativeDepositUSD_not: BigDecimal
  cumulativeDepositUSD_gt: BigDecimal
  cumulativeDepositUSD_lt: BigDecimal
  cumulativeDepositUSD_gte: BigDecimal
  cumulativeDepositUSD_lte: BigDecimal
  cumulativeDepositUSD_in: [BigDecimal!]
  cumulativeDepositUSD_not_in: [BigDecimal!]
  cumulativeWithdrawTokenAmounts: [BigInt!]
  cumulativeWithdrawTokenAmounts_not: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains_nocase: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeWithdrawUSD: BigDecimal
  cumulativeWithdrawUSD_not: BigDecimal
  cumulativeWithdrawUSD_gt: BigDecimal
  cumulativeWithdrawUSD_lt: BigDecimal
  cumulativeWithdrawUSD_gte: BigDecimal
  cumulativeWithdrawUSD_lte: BigDecimal
  cumulativeWithdrawUSD_in: [BigDecimal!]
  cumulativeWithdrawUSD_not_in: [BigDecimal!]
  cumulativeRewardTokenAmounts: [BigInt!]
  cumulativeRewardTokenAmounts_not: [BigInt!]
  cumulativeRewardTokenAmounts_contains: [BigInt!]
  cumulativeRewardTokenAmounts_contains_nocase: [BigInt!]
  cumulativeRewardTokenAmounts_not_contains: [BigInt!]
  cumulativeRewardTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeRewardUSD: [BigInt!]
  cumulativeRewardUSD_not: [BigInt!]
  cumulativeRewardUSD_contains: [BigInt!]
  cumulativeRewardUSD_contains_nocase: [BigInt!]
  cumulativeRewardUSD_not_contains: [BigInt!]
  cumulativeRewardUSD_not_contains_nocase: [BigInt!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PositionSnapshot_filter]
  or: [PositionSnapshot_filter]
}

enum PositionSnapshot_orderBy {
  id
  hash
  logIndex
  nonce
  position
  position__id
  position__tokenId
  position__isStaked
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  liquidityTokenType
  liquidity
  liquidityUSD
  cumulativeDepositTokenAmounts
  cumulativeDepositUSD
  cumulativeWithdrawTokenAmounts
  cumulativeWithdrawUSD
  cumulativeRewardTokenAmounts
  cumulativeRewardUSD
  depositCount
  withdrawCount
  blockNumber
  timestamp
}

input Position_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  isStaked: Boolean
  isStaked_not: Boolean
  isStaked_in: [Boolean!]
  isStaked_not_in: [Boolean!]
  hashOpened: Bytes
  hashOpened_not: Bytes
  hashOpened_gt: Bytes
  hashOpened_lt: Bytes
  hashOpened_gte: Bytes
  hashOpened_lte: Bytes
  hashOpened_in: [Bytes!]
  hashOpened_not_in: [Bytes!]
  hashOpened_contains: Bytes
  hashOpened_not_contains: Bytes
  hashClosed: Bytes
  hashClosed_not: Bytes
  hashClosed_gt: Bytes
  hashClosed_lt: Bytes
  hashClosed_gte: Bytes
  hashClosed_lte: Bytes
  hashClosed_in: [Bytes!]
  hashClosed_not_in: [Bytes!]
  hashClosed_contains: Bytes
  hashClosed_not_contains: Bytes
  blockNumberOpened: BigInt
  blockNumberOpened_not: BigInt
  blockNumberOpened_gt: BigInt
  blockNumberOpened_lt: BigInt
  blockNumberOpened_gte: BigInt
  blockNumberOpened_lte: BigInt
  blockNumberOpened_in: [BigInt!]
  blockNumberOpened_not_in: [BigInt!]
  timestampOpened: BigInt
  timestampOpened_not: BigInt
  timestampOpened_gt: BigInt
  timestampOpened_lt: BigInt
  timestampOpened_gte: BigInt
  timestampOpened_lte: BigInt
  timestampOpened_in: [BigInt!]
  timestampOpened_not_in: [BigInt!]
  blockNumberClosed: BigInt
  blockNumberClosed_not: BigInt
  blockNumberClosed_gt: BigInt
  blockNumberClosed_lt: BigInt
  blockNumberClosed_gte: BigInt
  blockNumberClosed_lte: BigInt
  blockNumberClosed_in: [BigInt!]
  blockNumberClosed_not_in: [BigInt!]
  timestampClosed: BigInt
  timestampClosed_not: BigInt
  timestampClosed_gt: BigInt
  timestampClosed_lt: BigInt
  timestampClosed_gte: BigInt
  timestampClosed_lte: BigInt
  timestampClosed_in: [BigInt!]
  timestampClosed_not_in: [BigInt!]
  tickLower: String
  tickLower_not: String
  tickLower_gt: String
  tickLower_lt: String
  tickLower_gte: String
  tickLower_lte: String
  tickLower_in: [String!]
  tickLower_not_in: [String!]
  tickLower_contains: String
  tickLower_contains_nocase: String
  tickLower_not_contains: String
  tickLower_not_contains_nocase: String
  tickLower_starts_with: String
  tickLower_starts_with_nocase: String
  tickLower_not_starts_with: String
  tickLower_not_starts_with_nocase: String
  tickLower_ends_with: String
  tickLower_ends_with_nocase: String
  tickLower_not_ends_with: String
  tickLower_not_ends_with_nocase: String
  tickLower_: Tick_filter
  tickUpper: String
  tickUpper_not: String
  tickUpper_gt: String
  tickUpper_lt: String
  tickUpper_gte: String
  tickUpper_lte: String
  tickUpper_in: [String!]
  tickUpper_not_in: [String!]
  tickUpper_contains: String
  tickUpper_contains_nocase: String
  tickUpper_not_contains: String
  tickUpper_not_contains_nocase: String
  tickUpper_starts_with: String
  tickUpper_starts_with_nocase: String
  tickUpper_not_starts_with: String
  tickUpper_not_starts_with_nocase: String
  tickUpper_ends_with: String
  tickUpper_ends_with_nocase: String
  tickUpper_not_ends_with: String
  tickUpper_not_ends_with_nocase: String
  tickUpper_: Tick_filter
  liquidityToken: String
  liquidityToken_not: String
  liquidityToken_gt: String
  liquidityToken_lt: String
  liquidityToken_gte: String
  liquidityToken_lte: String
  liquidityToken_in: [String!]
  liquidityToken_not_in: [String!]
  liquidityToken_contains: String
  liquidityToken_contains_nocase: String
  liquidityToken_not_contains: String
  liquidityToken_not_contains_nocase: String
  liquidityToken_starts_with: String
  liquidityToken_starts_with_nocase: String
  liquidityToken_not_starts_with: String
  liquidityToken_not_starts_with_nocase: String
  liquidityToken_ends_with: String
  liquidityToken_ends_with_nocase: String
  liquidityToken_not_ends_with: String
  liquidityToken_not_ends_with_nocase: String
  liquidityToken_: Token_filter
  liquidityTokenType: TokenType
  liquidityTokenType_not: TokenType
  liquidityTokenType_in: [TokenType!]
  liquidityTokenType_not_in: [TokenType!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  liquidityUSD: BigDecimal
  liquidityUSD_not: BigDecimal
  liquidityUSD_gt: BigDecimal
  liquidityUSD_lt: BigDecimal
  liquidityUSD_gte: BigDecimal
  liquidityUSD_lte: BigDecimal
  liquidityUSD_in: [BigDecimal!]
  liquidityUSD_not_in: [BigDecimal!]
  cumulativeDepositTokenAmounts: [BigInt!]
  cumulativeDepositTokenAmounts_not: [BigInt!]
  cumulativeDepositTokenAmounts_contains: [BigInt!]
  cumulativeDepositTokenAmounts_contains_nocase: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains: [BigInt!]
  cumulativeDepositTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeDepositUSD: BigDecimal
  cumulativeDepositUSD_not: BigDecimal
  cumulativeDepositUSD_gt: BigDecimal
  cumulativeDepositUSD_lt: BigDecimal
  cumulativeDepositUSD_gte: BigDecimal
  cumulativeDepositUSD_lte: BigDecimal
  cumulativeDepositUSD_in: [BigDecimal!]
  cumulativeDepositUSD_not_in: [BigDecimal!]
  cumulativeWithdrawTokenAmounts: [BigInt!]
  cumulativeWithdrawTokenAmounts_not: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_contains_nocase: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains: [BigInt!]
  cumulativeWithdrawTokenAmounts_not_contains_nocase: [BigInt!]
  cumulativeWithdrawUSD: BigDecimal
  cumulativeWithdrawUSD_not: BigDecimal
  cumulativeWithdrawUSD_gt: BigDecimal
  cumulativeWithdrawUSD_lt: BigDecimal
  cumulativeWithdrawUSD_gte: BigDecimal
  cumulativeWithdrawUSD_lte: BigDecimal
  cumulativeWithdrawUSD_in: [BigDecimal!]
  cumulativeWithdrawUSD_not_in: [BigDecimal!]
  cumulativeRewardUSD: [BigInt!]
  cumulativeRewardUSD_not: [BigInt!]
  cumulativeRewardUSD_contains: [BigInt!]
  cumulativeRewardUSD_contains_nocase: [BigInt!]
  cumulativeRewardUSD_not_contains: [BigInt!]
  cumulativeRewardUSD_not_contains_nocase: [BigInt!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  deposits_: Deposit_filter
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  withdraws_: Withdraw_filter
  snapshots_: PositionSnapshot_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Position_filter]
  or: [Position_filter]
}

enum Position_orderBy {
  id
  tokenId
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  isStaked
  hashOpened
  hashClosed
  blockNumberOpened
  timestampOpened
  blockNumberClosed
  timestampClosed
  tickLower
  tickLower__id
  tickLower__index
  tickLower__createdTimestamp
  tickLower__createdBlockNumber
  tickLower__liquidityGross
  tickLower__liquidityGrossUSD
  tickLower__liquidityNet
  tickLower__liquidityNetUSD
  tickLower__lastSnapshotDayID
  tickLower__lastSnapshotHourID
  tickLower__lastUpdateTimestamp
  tickLower__lastUpdateBlockNumber
  tickUpper
  tickUpper__id
  tickUpper__index
  tickUpper__createdTimestamp
  tickUpper__createdBlockNumber
  tickUpper__liquidityGross
  tickUpper__liquidityGrossUSD
  tickUpper__liquidityNet
  tickUpper__liquidityNetUSD
  tickUpper__lastSnapshotDayID
  tickUpper__lastSnapshotHourID
  tickUpper__lastUpdateTimestamp
  tickUpper__lastUpdateBlockNumber
  liquidityToken
  liquidityToken__id
  liquidityToken__name
  liquidityToken__symbol
  liquidityToken__decimals
  liquidityToken__lastPriceUSD
  liquidityToken__lastPriceBlockNumber
  liquidityToken___lastPricePool
  liquidityToken___totalSupply
  liquidityToken___totalValueLockedUSD
  liquidityToken___largePriceChangeBuffer
  liquidityToken___largeTVLImpactBuffer
  liquidityTokenType
  liquidity
  liquidityUSD
  cumulativeDepositTokenAmounts
  cumulativeDepositUSD
  cumulativeWithdrawTokenAmounts
  cumulativeWithdrawUSD
  cumulativeRewardUSD
  depositCount
  deposits
  withdrawCount
  withdraws
  snapshots
}

interface Protocol {
  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: Bytes!
  """ Name of the protocol, including version. e.g. Uniswap v3 """
  name: String!
  """ Slug of protocol, including version. e.g. uniswap-v3 """
  slug: String!
  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!
  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!
  """ The blockchain network this subgraph is indexing on """
  network: Network!
  """ The type of protocol (e.g. DEX, Lending, Yield, etc) """
  type: ProtocolType!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: BigDecimal
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Daily usage metrics for this protocol """
  dailyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: UsageMetricsDailySnapshot_orderBy, orderDirection: OrderDirection, where: UsageMetricsDailySnapshot_filter): [UsageMetricsDailySnapshot!]!
  """ Hourly usage metrics for this protocol """
  hourlyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: UsageMetricsHourlySnapshot_orderBy, orderDirection: OrderDirection, where: UsageMetricsHourlySnapshot_filter): [UsageMetricsHourlySnapshot!]!
  """ Daily financial metrics for this protocol """
  financialMetrics(skip: Int = 0, first: Int = 100, orderBy: FinancialsDailySnapshot_orderBy, orderDirection: OrderDirection, where: FinancialsDailySnapshot_filter): [FinancialsDailySnapshot!]!
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
}

input Protocol_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  schemaVersion: String
  schemaVersion_not: String
  schemaVersion_gt: String
  schemaVersion_lt: String
  schemaVersion_gte: String
  schemaVersion_lte: String
  schemaVersion_in: [String!]
  schemaVersion_not_in: [String!]
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  subgraphVersion: String
  subgraphVersion_not: String
  subgraphVersion_gt: String
  subgraphVersion_lt: String
  subgraphVersion_gte: String
  subgraphVersion_lte: String
  subgraphVersion_in: [String!]
  subgraphVersion_not_in: [String!]
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  methodologyVersion: String
  methodologyVersion_not: String
  methodologyVersion_gt: String
  methodologyVersion_lt: String
  methodologyVersion_gte: String
  methodologyVersion_lte: String
  methodologyVersion_in: [String!]
  methodologyVersion_not_in: [String!]
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  network: Network
  network_not: Network
  network_in: [Network!]
  network_not_in: [Network!]
  type: ProtocolType
  type_not: ProtocolType
  type_in: [ProtocolType!]
  type_not_in: [ProtocolType!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  protocolControlledValueUSD: BigDecimal
  protocolControlledValueUSD_not: BigDecimal
  protocolControlledValueUSD_gt: BigDecimal
  protocolControlledValueUSD_lt: BigDecimal
  protocolControlledValueUSD_gte: BigDecimal
  protocolControlledValueUSD_lte: BigDecimal
  protocolControlledValueUSD_in: [BigDecimal!]
  protocolControlledValueUSD_not_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  dailyUsageMetrics_: UsageMetricsDailySnapshot_filter
  hourlyUsageMetrics_: UsageMetricsHourlySnapshot_filter
  financialMetrics_: FinancialsDailySnapshot_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Protocol_filter]
  or: [Protocol_filter]
}

enum Protocol_orderBy {
  id
  name
  slug
  schemaVersion
  subgraphVersion
  methodologyVersion
  network
  type
  totalValueLockedUSD
  protocolControlledValueUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  cumulativeUniqueUsers
  totalPoolCount
  dailyUsageMetrics
  hourlyUsageMetrics
  financialMetrics
}

type Query {
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  reward(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Reward
  rewards(
    skip: Int = 0
    first: Int = 100
    orderBy: Reward_orderBy
    orderDirection: OrderDirection
    where: Reward_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Reward!]!
  poolFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolFee
  poolFees(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolFee_orderBy
    orderDirection: OrderDirection
    where: PoolFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolFee!]!
  dexAmmProtocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DexAmmProtocol
  dexAmmProtocols(
    skip: Int = 0
    first: Int = 100
    orderBy: DexAmmProtocol_orderBy
    orderDirection: OrderDirection
    where: DexAmmProtocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DexAmmProtocol!]!
  usageMetricsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageMetricsDailySnapshot
  usageMetricsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageMetricsDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: UsageMetricsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsageMetricsDailySnapshot!]!
  usageMetricsHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageMetricsHourlySnapshot
  usageMetricsHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageMetricsHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: UsageMetricsHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsageMetricsHourlySnapshot!]!
  financialsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FinancialsDailySnapshot
  financialsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FinancialsDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: FinancialsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FinancialsDailySnapshot!]!
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  poolDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolDailySnapshot
  poolDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: PoolDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolDailySnapshot!]!
  poolHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolHourlySnapshot
  poolHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: PoolHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolHourlySnapshot!]!
  tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tick
  ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Tick_orderBy
    orderDirection: OrderDirection
    where: Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tick!]!
  tickDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TickDailySnapshot
  tickDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TickDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: TickDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TickDailySnapshot!]!
  tickHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TickHourlySnapshot
  tickHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TickHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: TickHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TickHourlySnapshot!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Position
  positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    where: Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Position!]!
  positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionSnapshot
  positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionSnapshot_orderBy
    orderDirection: OrderDirection
    where: PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionSnapshot!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdraw
  withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdraw_orderBy
    orderDirection: OrderDirection
    where: Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdraw!]!
  swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Swap
  swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Swap_orderBy
    orderDirection: OrderDirection
    where: Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Swap!]!
  activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActiveAccount
  activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: ActiveAccount_orderBy
    orderDirection: OrderDirection
    where: ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActiveAccount!]!
  helperStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _HelperStore
  helperStores(
    skip: Int = 0
    first: Int = 100
    orderBy: _HelperStore_orderBy
    orderDirection: OrderDirection
    where: _HelperStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_HelperStore!]!
  protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Reward {
  id: Bytes!
  createdTimestamp: BigInt!
  createdBlockNumber: BigInt!
  token: Token!
  amount: BigInt!
  account: Account!
}

input Reward_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Reward_filter]
  or: [Reward_filter]
}

enum Reward_orderBy {
  id
  createdTimestamp
  createdBlockNumber
  token
  token__id
  token__name
  token__symbol
  token__decimals
  token__lastPriceUSD
  token__lastPriceBlockNumber
  token___lastPricePool
  token___totalSupply
  token___totalValueLockedUSD
  token___largePriceChangeBuffer
  token___largeTVLImpactBuffer
  amount
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
}

type Subscription {
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  reward(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Reward
  rewards(
    skip: Int = 0
    first: Int = 100
    orderBy: Reward_orderBy
    orderDirection: OrderDirection
    where: Reward_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Reward!]!
  poolFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolFee
  poolFees(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolFee_orderBy
    orderDirection: OrderDirection
    where: PoolFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolFee!]!
  dexAmmProtocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DexAmmProtocol
  dexAmmProtocols(
    skip: Int = 0
    first: Int = 100
    orderBy: DexAmmProtocol_orderBy
    orderDirection: OrderDirection
    where: DexAmmProtocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DexAmmProtocol!]!
  usageMetricsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageMetricsDailySnapshot
  usageMetricsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageMetricsDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: UsageMetricsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsageMetricsDailySnapshot!]!
  usageMetricsHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageMetricsHourlySnapshot
  usageMetricsHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageMetricsHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: UsageMetricsHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsageMetricsHourlySnapshot!]!
  financialsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FinancialsDailySnapshot
  financialsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FinancialsDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: FinancialsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FinancialsDailySnapshot!]!
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  poolDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolDailySnapshot
  poolDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: PoolDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolDailySnapshot!]!
  poolHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolHourlySnapshot
  poolHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: PoolHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolHourlySnapshot!]!
  tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tick
  ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Tick_orderBy
    orderDirection: OrderDirection
    where: Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tick!]!
  tickDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TickDailySnapshot
  tickDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TickDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: TickDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TickDailySnapshot!]!
  tickHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TickHourlySnapshot
  tickHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: TickHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: TickHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TickHourlySnapshot!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Position
  positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    where: Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Position!]!
  positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionSnapshot
  positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionSnapshot_orderBy
    orderDirection: OrderDirection
    where: PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionSnapshot!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdraw
  withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdraw_orderBy
    orderDirection: OrderDirection
    where: Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdraw!]!
  swap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Swap
  swaps(
    skip: Int = 0
    first: Int = 100
    orderBy: Swap_orderBy
    orderDirection: OrderDirection
    where: Swap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Swap!]!
  activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActiveAccount
  activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: ActiveAccount_orderBy
    orderDirection: OrderDirection
    where: ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActiveAccount!]!
  helperStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): _HelperStore
  helperStores(
    skip: Int = 0
    first: Int = 100
    orderBy: _HelperStore_orderBy
    orderDirection: OrderDirection
    where: _HelperStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [_HelperStore!]!
  protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Swap {
  """ { Transaction hash }-{ Log index } """
  id: Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: DexAmmProtocol!
  """ Account that emitted this event """
  account: Account!
  """ The pool involving this event """
  pool: Pool!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ the tick after the swap """
  tick: BigInt
  """ Token deposited into pool """
  tokenIn: Token!
  """ Amount of token deposited into pool in native units """
  amountIn: BigInt!
  """ Amount of token deposited into pool in USD """
  amountInUSD: BigDecimal!
  """ Token withdrawn from pool """
  tokenOut: Token!
  """ Amount of token withdrawn from pool in native units """
  amountOut: BigInt!
  """ Amount of token withdrawn from pool in USD """
  amountOutUSD: BigDecimal!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
}

input Swap_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  hash: Bytes
  hash_not: Bytes
  hash_gt: Bytes
  hash_lt: Bytes
  hash_gte: Bytes
  hash_lte: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  tick: BigInt
  tick_not: BigInt
  tick_gt: BigInt
  tick_lt: BigInt
  tick_gte: BigInt
  tick_lte: BigInt
  tick_in: [BigInt!]
  tick_not_in: [BigInt!]
  tokenIn: String
  tokenIn_not: String
  tokenIn_gt: String
  tokenIn_lt: String
  tokenIn_gte: String
  tokenIn_lte: String
  tokenIn_in: [String!]
  tokenIn_not_in: [String!]
  tokenIn_contains: String
  tokenIn_contains_nocase: String
  tokenIn_not_contains: String
  tokenIn_not_contains_nocase: String
  tokenIn_starts_with: String
  tokenIn_starts_with_nocase: String
  tokenIn_not_starts_with: String
  tokenIn_not_starts_with_nocase: String
  tokenIn_ends_with: String
  tokenIn_ends_with_nocase: String
  tokenIn_not_ends_with: String
  tokenIn_not_ends_with_nocase: String
  tokenIn_: Token_filter
  amountIn: BigInt
  amountIn_not: BigInt
  amountIn_gt: BigInt
  amountIn_lt: BigInt
  amountIn_gte: BigInt
  amountIn_lte: BigInt
  amountIn_in: [BigInt!]
  amountIn_not_in: [BigInt!]
  amountInUSD: BigDecimal
  amountInUSD_not: BigDecimal
  amountInUSD_gt: BigDecimal
  amountInUSD_lt: BigDecimal
  amountInUSD_gte: BigDecimal
  amountInUSD_lte: BigDecimal
  amountInUSD_in: [BigDecimal!]
  amountInUSD_not_in: [BigDecimal!]
  tokenOut: String
  tokenOut_not: String
  tokenOut_gt: String
  tokenOut_lt: String
  tokenOut_gte: String
  tokenOut_lte: String
  tokenOut_in: [String!]
  tokenOut_not_in: [String!]
  tokenOut_contains: String
  tokenOut_contains_nocase: String
  tokenOut_not_contains: String
  tokenOut_not_contains_nocase: String
  tokenOut_starts_with: String
  tokenOut_starts_with_nocase: String
  tokenOut_not_starts_with: String
  tokenOut_not_starts_with_nocase: String
  tokenOut_ends_with: String
  tokenOut_ends_with_nocase: String
  tokenOut_not_ends_with: String
  tokenOut_not_ends_with_nocase: String
  tokenOut_: Token_filter
  amountOut: BigInt
  amountOut_not: BigInt
  amountOut_gt: BigInt
  amountOut_lt: BigInt
  amountOut_gte: BigInt
  amountOut_lte: BigInt
  amountOut_in: [BigInt!]
  amountOut_not_in: [BigInt!]
  amountOutUSD: BigDecimal
  amountOutUSD_not: BigDecimal
  amountOutUSD_gt: BigDecimal
  amountOutUSD_lt: BigDecimal
  amountOutUSD_gte: BigDecimal
  amountOutUSD_lte: BigDecimal
  amountOutUSD_in: [BigDecimal!]
  amountOutUSD_not_in: [BigDecimal!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Swap_filter]
  or: [Swap_filter]
}

enum Swap_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  blockNumber
  timestamp
  tick
  tokenIn
  tokenIn__id
  tokenIn__name
  tokenIn__symbol
  tokenIn__decimals
  tokenIn__lastPriceUSD
  tokenIn__lastPriceBlockNumber
  tokenIn___lastPricePool
  tokenIn___totalSupply
  tokenIn___totalValueLockedUSD
  tokenIn___largePriceChangeBuffer
  tokenIn___largeTVLImpactBuffer
  amountIn
  amountInUSD
  tokenOut
  tokenOut__id
  tokenOut__name
  tokenOut__symbol
  tokenOut__decimals
  tokenOut__lastPriceUSD
  tokenOut__lastPriceBlockNumber
  tokenOut___lastPricePool
  tokenOut___totalSupply
  tokenOut___totalValueLockedUSD
  tokenOut___largePriceChangeBuffer
  tokenOut___largeTVLImpactBuffer
  amountOut
  amountOutUSD
  reserveAmounts
}

type Tick {
  """ { pool address }-{ tick index } """
  id: Bytes!
  """ tick index """
  index: BigInt!
  """ Liquidity pool this tick belongs to """
  pool: Pool!
  """ Creation timestamp """
  createdTimestamp: BigInt!
  """ Creation block number """
  createdBlockNumber: BigInt!
  """ calculated price of token0 of tick within this pool - constant """
  prices: [BigDecimal!]!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: BigDecimal!
  """ Day ID of the most recent daily snapshot """
  lastSnapshotDayID: Int!
  """ Hour ID of the most recent hourly snapshot """
  lastSnapshotHourID: Int!
  """ Timestamp of the last time this entity was updated """
  lastUpdateTimestamp: BigInt!
  """ Block number of the last time this entity was updated """
  lastUpdateBlockNumber: BigInt!
}

type TickDailySnapshot {
  """ { pool address }-{ tick index }-{ day ID } """
  id: Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ tick index """
  tick: Tick!
  """ liquidity pool this tick belongs to """
  pool: Pool!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input TickDailySnapshot_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: BigDecimal
  liquidityGrossUSD_not: BigDecimal
  liquidityGrossUSD_gt: BigDecimal
  liquidityGrossUSD_lt: BigDecimal
  liquidityGrossUSD_gte: BigDecimal
  liquidityGrossUSD_lte: BigDecimal
  liquidityGrossUSD_in: [BigDecimal!]
  liquidityGrossUSD_not_in: [BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: BigDecimal
  liquidityNetUSD_not: BigDecimal
  liquidityNetUSD_gt: BigDecimal
  liquidityNetUSD_lt: BigDecimal
  liquidityNetUSD_gte: BigDecimal
  liquidityNetUSD_lte: BigDecimal
  liquidityNetUSD_in: [BigDecimal!]
  liquidityNetUSD_not_in: [BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TickDailySnapshot_filter]
  or: [TickDailySnapshot_filter]
}

enum TickDailySnapshot_orderBy {
  id
  day
  tick
  tick__id
  tick__index
  tick__createdTimestamp
  tick__createdBlockNumber
  tick__liquidityGross
  tick__liquidityGrossUSD
  tick__liquidityNet
  tick__liquidityNetUSD
  tick__lastSnapshotDayID
  tick__lastSnapshotHourID
  tick__lastUpdateTimestamp
  tick__lastUpdateBlockNumber
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  timestamp
  blockNumber
}

type TickHourlySnapshot {
  """ { pool address }-{ tick index }-{ hour ID } """
  id: Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ tick index """
  tick: Tick!
  """ liquidity pool this tick belongs to """
  pool: Pool!
  """ total liquidity pool has as tick lower or upper """
  liquidityGross: BigInt!
  """ total liquidity in USD pool has as tick lower or upper """
  liquidityGrossUSD: BigDecimal!
  """ how much liquidity changes when tick crossed """
  liquidityNet: BigInt!
  """ how much liquidity in USD changes when tick crossed """
  liquidityNetUSD: BigDecimal!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input TickHourlySnapshot_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: BigDecimal
  liquidityGrossUSD_not: BigDecimal
  liquidityGrossUSD_gt: BigDecimal
  liquidityGrossUSD_lt: BigDecimal
  liquidityGrossUSD_gte: BigDecimal
  liquidityGrossUSD_lte: BigDecimal
  liquidityGrossUSD_in: [BigDecimal!]
  liquidityGrossUSD_not_in: [BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: BigDecimal
  liquidityNetUSD_not: BigDecimal
  liquidityNetUSD_gt: BigDecimal
  liquidityNetUSD_lt: BigDecimal
  liquidityNetUSD_gte: BigDecimal
  liquidityNetUSD_lte: BigDecimal
  liquidityNetUSD_in: [BigDecimal!]
  liquidityNetUSD_not_in: [BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TickHourlySnapshot_filter]
  or: [TickHourlySnapshot_filter]
}

enum TickHourlySnapshot_orderBy {
  id
  hour
  tick
  tick__id
  tick__index
  tick__createdTimestamp
  tick__createdBlockNumber
  tick__liquidityGross
  tick__liquidityGrossUSD
  tick__liquidityNet
  tick__liquidityNetUSD
  tick__lastSnapshotDayID
  tick__lastSnapshotHourID
  tick__lastUpdateTimestamp
  tick__lastUpdateBlockNumber
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  timestamp
  blockNumber
}

input Tick_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  prices: [BigDecimal!]
  prices_not: [BigDecimal!]
  prices_contains: [BigDecimal!]
  prices_contains_nocase: [BigDecimal!]
  prices_not_contains: [BigDecimal!]
  prices_not_contains_nocase: [BigDecimal!]
  liquidityGross: BigInt
  liquidityGross_not: BigInt
  liquidityGross_gt: BigInt
  liquidityGross_lt: BigInt
  liquidityGross_gte: BigInt
  liquidityGross_lte: BigInt
  liquidityGross_in: [BigInt!]
  liquidityGross_not_in: [BigInt!]
  liquidityGrossUSD: BigDecimal
  liquidityGrossUSD_not: BigDecimal
  liquidityGrossUSD_gt: BigDecimal
  liquidityGrossUSD_lt: BigDecimal
  liquidityGrossUSD_gte: BigDecimal
  liquidityGrossUSD_lte: BigDecimal
  liquidityGrossUSD_in: [BigDecimal!]
  liquidityGrossUSD_not_in: [BigDecimal!]
  liquidityNet: BigInt
  liquidityNet_not: BigInt
  liquidityNet_gt: BigInt
  liquidityNet_lt: BigInt
  liquidityNet_gte: BigInt
  liquidityNet_lte: BigInt
  liquidityNet_in: [BigInt!]
  liquidityNet_not_in: [BigInt!]
  liquidityNetUSD: BigDecimal
  liquidityNetUSD_not: BigDecimal
  liquidityNetUSD_gt: BigDecimal
  liquidityNetUSD_lt: BigDecimal
  liquidityNetUSD_gte: BigDecimal
  liquidityNetUSD_lte: BigDecimal
  liquidityNetUSD_in: [BigDecimal!]
  liquidityNetUSD_not_in: [BigDecimal!]
  lastSnapshotDayID: Int
  lastSnapshotDayID_not: Int
  lastSnapshotDayID_gt: Int
  lastSnapshotDayID_lt: Int
  lastSnapshotDayID_gte: Int
  lastSnapshotDayID_lte: Int
  lastSnapshotDayID_in: [Int!]
  lastSnapshotDayID_not_in: [Int!]
  lastSnapshotHourID: Int
  lastSnapshotHourID_not: Int
  lastSnapshotHourID_gt: Int
  lastSnapshotHourID_lt: Int
  lastSnapshotHourID_gte: Int
  lastSnapshotHourID_lte: Int
  lastSnapshotHourID_in: [Int!]
  lastSnapshotHourID_not_in: [Int!]
  lastUpdateTimestamp: BigInt
  lastUpdateTimestamp_not: BigInt
  lastUpdateTimestamp_gt: BigInt
  lastUpdateTimestamp_lt: BigInt
  lastUpdateTimestamp_gte: BigInt
  lastUpdateTimestamp_lte: BigInt
  lastUpdateTimestamp_in: [BigInt!]
  lastUpdateTimestamp_not_in: [BigInt!]
  lastUpdateBlockNumber: BigInt
  lastUpdateBlockNumber_not: BigInt
  lastUpdateBlockNumber_gt: BigInt
  lastUpdateBlockNumber_lt: BigInt
  lastUpdateBlockNumber_gte: BigInt
  lastUpdateBlockNumber_lte: BigInt
  lastUpdateBlockNumber_in: [BigInt!]
  lastUpdateBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Tick_filter]
  or: [Tick_filter]
}

enum Tick_orderBy {
  id
  index
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  createdTimestamp
  createdBlockNumber
  prices
  liquidityGross
  liquidityGrossUSD
  liquidityNet
  liquidityNetUSD
  lastSnapshotDayID
  lastSnapshotHourID
  lastUpdateTimestamp
  lastUpdateBlockNumber
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Token {
  """ Smart contract address of the token """
  id: Bytes!
  """ Name of the token, mirrored from the smart contract """
  name: String!
  """ Symbol of the token, mirrored from the smart contract """
  symbol: String!
  """ The number of decimal places this token uses, default to 18 """
  decimals: Int!
  """ Optional field to track the price of a token, mostly for caching purposes 
  """
  lastPriceUSD: BigDecimal
  """ Optional field to track the block number of the last token price """
  lastPriceBlockNumber: BigInt
  """ last pool that gave this token a price """
  _lastPricePool: Bytes
  """ amount of tokens in the protocol """
  _totalSupply: BigInt!
  """ Total value locked in the protocol """
  _totalValueLockedUSD: BigDecimal!
  _largePriceChangeBuffer: Int!
  _largeTVLImpactBuffer: Int!
  rewards(skip: Int = 0, first: Int = 100, orderBy: Reward_orderBy, orderDirection: OrderDirection, where: Reward_filter): [Reward!]!
}

enum TokenType {
  MULTIPLE
  UNKNOWN
  ERC20
  ERC721
  ERC1155
  BEP20
  BEP721
  BEP1155
}

input Token_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  lastPriceUSD: BigDecimal
  lastPriceUSD_not: BigDecimal
  lastPriceUSD_gt: BigDecimal
  lastPriceUSD_lt: BigDecimal
  lastPriceUSD_gte: BigDecimal
  lastPriceUSD_lte: BigDecimal
  lastPriceUSD_in: [BigDecimal!]
  lastPriceUSD_not_in: [BigDecimal!]
  lastPriceBlockNumber: BigInt
  lastPriceBlockNumber_not: BigInt
  lastPriceBlockNumber_gt: BigInt
  lastPriceBlockNumber_lt: BigInt
  lastPriceBlockNumber_gte: BigInt
  lastPriceBlockNumber_lte: BigInt
  lastPriceBlockNumber_in: [BigInt!]
  lastPriceBlockNumber_not_in: [BigInt!]
  _lastPricePool: Bytes
  _lastPricePool_not: Bytes
  _lastPricePool_gt: Bytes
  _lastPricePool_lt: Bytes
  _lastPricePool_gte: Bytes
  _lastPricePool_lte: Bytes
  _lastPricePool_in: [Bytes!]
  _lastPricePool_not_in: [Bytes!]
  _lastPricePool_contains: Bytes
  _lastPricePool_not_contains: Bytes
  _totalSupply: BigInt
  _totalSupply_not: BigInt
  _totalSupply_gt: BigInt
  _totalSupply_lt: BigInt
  _totalSupply_gte: BigInt
  _totalSupply_lte: BigInt
  _totalSupply_in: [BigInt!]
  _totalSupply_not_in: [BigInt!]
  _totalValueLockedUSD: BigDecimal
  _totalValueLockedUSD_not: BigDecimal
  _totalValueLockedUSD_gt: BigDecimal
  _totalValueLockedUSD_lt: BigDecimal
  _totalValueLockedUSD_gte: BigDecimal
  _totalValueLockedUSD_lte: BigDecimal
  _totalValueLockedUSD_in: [BigDecimal!]
  _totalValueLockedUSD_not_in: [BigDecimal!]
  _largePriceChangeBuffer: Int
  _largePriceChangeBuffer_not: Int
  _largePriceChangeBuffer_gt: Int
  _largePriceChangeBuffer_lt: Int
  _largePriceChangeBuffer_gte: Int
  _largePriceChangeBuffer_lte: Int
  _largePriceChangeBuffer_in: [Int!]
  _largePriceChangeBuffer_not_in: [Int!]
  _largeTVLImpactBuffer: Int
  _largeTVLImpactBuffer_not: Int
  _largeTVLImpactBuffer_gt: Int
  _largeTVLImpactBuffer_lt: Int
  _largeTVLImpactBuffer_gte: Int
  _largeTVLImpactBuffer_lte: Int
  _largeTVLImpactBuffer_in: [Int!]
  _largeTVLImpactBuffer_not_in: [Int!]
  rewards_: Reward_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  name
  symbol
  decimals
  lastPriceUSD
  lastPriceBlockNumber
  _lastPricePool
  _totalSupply
  _totalValueLockedUSD
  _largePriceChangeBuffer
  _largeTVLImpactBuffer
  rewards
}

type UsageMetricsDailySnapshot {
  """ ID is # of days since Unix epoch time """
  id: Bytes!
  """ Number of days since Unix epoch time """
  day: Int!
  """ Protocol this snapshot is associated with """
  protocol: DexAmmProtocol!
  """ Number of unique daily active users """
  dailyActiveUsers: Int!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. 
  """
  dailyTransactionCount: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Total number of deposits (add liquidity) in an day """
  dailyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) in an day """
  dailyWithdrawCount: Int!
  """ Total number of trades (swaps) in an day """
  dailySwapCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input UsageMetricsDailySnapshot_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  day: Int
  day_not: Int
  day_gt: Int
  day_lt: Int
  day_gte: Int
  day_lte: Int
  day_in: [Int!]
  day_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: DexAmmProtocol_filter
  dailyActiveUsers: Int
  dailyActiveUsers_not: Int
  dailyActiveUsers_gt: Int
  dailyActiveUsers_lt: Int
  dailyActiveUsers_gte: Int
  dailyActiveUsers_lte: Int
  dailyActiveUsers_in: [Int!]
  dailyActiveUsers_not_in: [Int!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  dailyTransactionCount: Int
  dailyTransactionCount_not: Int
  dailyTransactionCount_gt: Int
  dailyTransactionCount_lt: Int
  dailyTransactionCount_gte: Int
  dailyTransactionCount_lte: Int
  dailyTransactionCount_in: [Int!]
  dailyTransactionCount_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  dailyDepositCount: Int
  dailyDepositCount_not: Int
  dailyDepositCount_gt: Int
  dailyDepositCount_lt: Int
  dailyDepositCount_gte: Int
  dailyDepositCount_lte: Int
  dailyDepositCount_in: [Int!]
  dailyDepositCount_not_in: [Int!]
  dailyWithdrawCount: Int
  dailyWithdrawCount_not: Int
  dailyWithdrawCount_gt: Int
  dailyWithdrawCount_lt: Int
  dailyWithdrawCount_gte: Int
  dailyWithdrawCount_lte: Int
  dailyWithdrawCount_in: [Int!]
  dailyWithdrawCount_not_in: [Int!]
  dailySwapCount: Int
  dailySwapCount_not: Int
  dailySwapCount_gt: Int
  dailySwapCount_lt: Int
  dailySwapCount_gte: Int
  dailySwapCount_lte: Int
  dailySwapCount_in: [Int!]
  dailySwapCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UsageMetricsDailySnapshot_filter]
  or: [UsageMetricsDailySnapshot_filter]
}

enum UsageMetricsDailySnapshot_orderBy {
  id
  day
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  dailyActiveUsers
  cumulativeUniqueUsers
  dailyTransactionCount
  totalPoolCount
  dailyDepositCount
  dailyWithdrawCount
  dailySwapCount
  timestamp
  blockNumber
}

type UsageMetricsHourlySnapshot {
  """ { # of hours since Unix epoch time } """
  id: Bytes!
  """ Number of hours since Unix epoch time """
  hour: Int!
  """ Protocol this snapshot is associated with """
  protocol: DexAmmProtocol!
  """ Number of unique hourly active users """
  hourlyActiveUsers: Int!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. 
  """
  hourlyTransactionCount: Int!
  """ Total number of deposits (add liquidity) in an hour """
  hourlyDepositCount: Int!
  """ Total number of withdrawals (remove liquidity) in an hour """
  hourlyWithdrawCount: Int!
  """ Total number of trades (swaps) in an hour """
  hourlySwapCount: Int!
  """ Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  timestamp: BigInt!
  """ Block number of when this snapshot was taken/last modified (May be taken after interval has passed) 
  """
  blockNumber: BigInt!
}

input UsageMetricsHourlySnapshot_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  hour: Int
  hour_not: Int
  hour_gt: Int
  hour_lt: Int
  hour_gte: Int
  hour_lte: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: DexAmmProtocol_filter
  hourlyActiveUsers: Int
  hourlyActiveUsers_not: Int
  hourlyActiveUsers_gt: Int
  hourlyActiveUsers_lt: Int
  hourlyActiveUsers_gte: Int
  hourlyActiveUsers_lte: Int
  hourlyActiveUsers_in: [Int!]
  hourlyActiveUsers_not_in: [Int!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  hourlyTransactionCount: Int
  hourlyTransactionCount_not: Int
  hourlyTransactionCount_gt: Int
  hourlyTransactionCount_lt: Int
  hourlyTransactionCount_gte: Int
  hourlyTransactionCount_lte: Int
  hourlyTransactionCount_in: [Int!]
  hourlyTransactionCount_not_in: [Int!]
  hourlyDepositCount: Int
  hourlyDepositCount_not: Int
  hourlyDepositCount_gt: Int
  hourlyDepositCount_lt: Int
  hourlyDepositCount_gte: Int
  hourlyDepositCount_lte: Int
  hourlyDepositCount_in: [Int!]
  hourlyDepositCount_not_in: [Int!]
  hourlyWithdrawCount: Int
  hourlyWithdrawCount_not: Int
  hourlyWithdrawCount_gt: Int
  hourlyWithdrawCount_lt: Int
  hourlyWithdrawCount_gte: Int
  hourlyWithdrawCount_lte: Int
  hourlyWithdrawCount_in: [Int!]
  hourlyWithdrawCount_not_in: [Int!]
  hourlySwapCount: Int
  hourlySwapCount_not: Int
  hourlySwapCount_gt: Int
  hourlySwapCount_lt: Int
  hourlySwapCount_gte: Int
  hourlySwapCount_lte: Int
  hourlySwapCount_in: [Int!]
  hourlySwapCount_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UsageMetricsHourlySnapshot_filter]
  or: [UsageMetricsHourlySnapshot_filter]
}

enum UsageMetricsHourlySnapshot_orderBy {
  id
  hour
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  hourlyActiveUsers
  cumulativeUniqueUsers
  hourlyTransactionCount
  hourlyDepositCount
  hourlyWithdrawCount
  hourlySwapCount
  timestamp
  blockNumber
}

type Withdraw {
  """ { Transaction hash }-{ Log index }"""
  id: Bytes!
  """ Transaction hash of the transaction that emitted this event """
  hash: Bytes!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Gas limit of the transaction that emitted this event """
  gasLimit: BigInt
  """ Gas used in this transaction. (Optional because not every chain will support this) 
  """
  gasUsed: BigInt
  """ Gas price of the transaction that emitted this event """
  gasPrice: BigInt
  """ The protocol this transaction belongs to """
  protocol: DexAmmProtocol!
  """ Account that emitted this event """
  account: Account!
  """ The user position changed by this event """
  position: Position
  """ lower tick of position """
  tickLower: BigInt
  """ upper tick of position """
  tickUpper: BigInt
  """ The pool involving this event """
  pool: Pool!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Amount of liquidity burned """
  liquidity: BigInt!
  """ Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool 
  """
  inputTokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]!
  """ Amount of input tokens in the token's native unit """
  inputTokenAmounts: [BigInt!]!
  """ Amount of input tokens in the liquidity pool """
  reserveAmounts: [BigInt!]
  """ USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool) 
  """
  amountUSD: BigDecimal!
}

input Withdraw_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  hash: Bytes
  hash_not: Bytes
  hash_gt: Bytes
  hash_lt: Bytes
  hash_gte: Bytes
  hash_lte: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: DexAmmProtocol_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  tickLower: BigInt
  tickLower_not: BigInt
  tickLower_gt: BigInt
  tickLower_lt: BigInt
  tickLower_gte: BigInt
  tickLower_lte: BigInt
  tickLower_in: [BigInt!]
  tickLower_not_in: [BigInt!]
  tickUpper: BigInt
  tickUpper_not: BigInt
  tickUpper_gt: BigInt
  tickUpper_lt: BigInt
  tickUpper_gte: BigInt
  tickUpper_lte: BigInt
  tickUpper_in: [BigInt!]
  tickUpper_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidity: BigInt
  liquidity_not: BigInt
  liquidity_gt: BigInt
  liquidity_lt: BigInt
  liquidity_gte: BigInt
  liquidity_lte: BigInt
  liquidity_in: [BigInt!]
  liquidity_not_in: [BigInt!]
  inputTokens: [String!]
  inputTokens_not: [String!]
  inputTokens_contains: [String!]
  inputTokens_contains_nocase: [String!]
  inputTokens_not_contains: [String!]
  inputTokens_not_contains_nocase: [String!]
  inputTokens_: Token_filter
  inputTokenAmounts: [BigInt!]
  inputTokenAmounts_not: [BigInt!]
  inputTokenAmounts_contains: [BigInt!]
  inputTokenAmounts_contains_nocase: [BigInt!]
  inputTokenAmounts_not_contains: [BigInt!]
  inputTokenAmounts_not_contains_nocase: [BigInt!]
  reserveAmounts: [BigInt!]
  reserveAmounts_not: [BigInt!]
  reserveAmounts_contains: [BigInt!]
  reserveAmounts_contains_nocase: [BigInt!]
  reserveAmounts_not_contains: [BigInt!]
  reserveAmounts_not_contains_nocase: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Withdraw_filter]
  or: [Withdraw_filter]
}

enum Withdraw_orderBy {
  id
  hash
  nonce
  logIndex
  gasLimit
  gasUsed
  gasPrice
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__totalValueLockedUSD
  protocol__totalLiquidityUSD
  protocol__activeLiquidityUSD
  protocol__uncollectedProtocolSideValueUSD
  protocol__uncollectedSupplySideValueUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeVolumeUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueLPs
  protocol__cumulativeUniqueTraders
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol__lastSnapshotDayID
  protocol__lastUpdateTimestamp
  protocol__lastUpdateBlockNumber
  protocol___regenesis
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__swapCount
  position
  position__id
  position__tokenId
  position__isStaked
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__liquidityTokenType
  position__liquidity
  position__liquidityUSD
  position__cumulativeDepositUSD
  position__cumulativeWithdrawUSD
  position__depositCount
  position__withdrawCount
  tickLower
  tickUpper
  pool
  pool__id
  pool__name
  pool__symbol
  pool__liquidityTokenType
  pool__isSingleSided
  pool__createdTimestamp
  pool__createdBlockNumber
  pool__tick
  pool__totalValueLockedUSD
  pool__totalLiquidity
  pool__totalLiquidityUSD
  pool__activeLiquidity
  pool__activeLiquidityUSD
  pool__cumulativeSupplySideRevenueUSD
  pool__cumulativeProtocolSideRevenueUSD
  pool__cumulativeTotalRevenueUSD
  pool__cumulativeVolumeUSD
  pool__stakedTokenAmount
  pool__cumulativeDepositCount
  pool__cumulativeWithdrawCount
  pool__cumulativeSwapCount
  pool__positionCount
  pool__openPositionCount
  pool__closedPositionCount
  pool__lastSnapshotDayID
  pool__lastSnapshotHourID
  pool__lastUpdateTimestamp
  pool__lastUpdateBlockNumber
  blockNumber
  timestamp
  liquidity
  inputTokens
  inputTokenAmounts
  reserveAmounts
  amountUSD
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""  Used to keep track of the price of Ether/TVL in USD, pool deposit count, and total unique users 
"""
type _HelperStore {
  id: Bytes!
  """ Token Prices """
  valueDecimalList: [BigDecimal!]
  """ price of ETH/TVL in USD """
  valueDecimal: BigDecimal
  """ # of deposits, # of unique users """
  valueInt: Int
}

input _HelperStore_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  valueDecimalList: [BigDecimal!]
  valueDecimalList_not: [BigDecimal!]
  valueDecimalList_contains: [BigDecimal!]
  valueDecimalList_contains_nocase: [BigDecimal!]
  valueDecimalList_not_contains: [BigDecimal!]
  valueDecimalList_not_contains_nocase: [BigDecimal!]
  valueDecimal: BigDecimal
  valueDecimal_not: BigDecimal
  valueDecimal_gt: BigDecimal
  valueDecimal_lt: BigDecimal
  valueDecimal_gte: BigDecimal
  valueDecimal_lte: BigDecimal
  valueDecimal_in: [BigDecimal!]
  valueDecimal_not_in: [BigDecimal!]
  valueInt: Int
  valueInt_not: Int
  valueInt_gt: Int
  valueInt_lt: Int
  valueInt_gte: Int
  valueInt_lte: Int
  valueInt_in: [Int!]
  valueInt_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [_HelperStore_filter]
  or: [_HelperStore_filter]
}

enum _HelperStore_orderBy {
  id
  valueDecimalList
  valueDecimal
  valueInt
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}