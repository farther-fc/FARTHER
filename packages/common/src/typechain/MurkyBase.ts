/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MurkyBaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getProof"
      | "getRoot"
      | "hashLeafPairs"
      | "log2ceil"
      | "log2ceilBitMagic"
      | "verifyProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getProof",
    values: [BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoot",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeafPairs",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "log2ceil",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "log2ceilBitMagic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [BytesLike, BytesLike[], BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getProof", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashLeafPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "log2ceil", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "log2ceilBitMagic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
}

export interface MurkyBase extends BaseContract {
  connect(runner?: ContractRunner | null): MurkyBase;
  waitForDeployment(): Promise<this>;

  interface: MurkyBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getProof: TypedContractMethod<
    [data: BytesLike[], node: BigNumberish],
    [string[]],
    "view"
  >;

  getRoot: TypedContractMethod<[data: BytesLike[]], [string], "view">;

  hashLeafPairs: TypedContractMethod<
    [left: BytesLike, right: BytesLike],
    [string],
    "view"
  >;

  log2ceil: TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  log2ceilBitMagic: TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  verifyProof: TypedContractMethod<
    [root: BytesLike, proof: BytesLike[], valueToProve: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getProof"
  ): TypedContractMethod<
    [data: BytesLike[], node: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoot"
  ): TypedContractMethod<[data: BytesLike[]], [string], "view">;
  getFunction(
    nameOrSignature: "hashLeafPairs"
  ): TypedContractMethod<[left: BytesLike, right: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "log2ceil"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "log2ceilBitMagic"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<
    [root: BytesLike, proof: BytesLike[], valueToProve: BytesLike],
    [boolean],
    "view"
  >;

  filters: {};
}
