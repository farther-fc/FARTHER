// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Token must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Token", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Token | null {
    return changetype<Token | null>(
      store.get_in_block("Token", id.toHexString()),
    );
  }

  static load(id: Bytes): Token | null {
    return changetype<Token | null>(store.get("Token", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get lastPriceUSD(): BigDecimal | null {
    let value = this.get("lastPriceUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lastPriceUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("lastPriceUSD");
    } else {
      this.set("lastPriceUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lastPriceBlockNumber(): BigInt | null {
    let value = this.get("lastPriceBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastPriceBlockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("lastPriceBlockNumber");
    } else {
      this.set("lastPriceBlockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get _lastPricePool(): Bytes | null {
    let value = this.get("_lastPricePool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set _lastPricePool(value: Bytes | null) {
    if (!value) {
      this.unset("_lastPricePool");
    } else {
      this.set("_lastPricePool", Value.fromBytes(<Bytes>value));
    }
  }

  get _totalSupply(): BigInt {
    let value = this.get("_totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _totalSupply(value: BigInt) {
    this.set("_totalSupply", Value.fromBigInt(value));
  }

  get _totalValueLockedUSD(): BigDecimal {
    let value = this.get("_totalValueLockedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set _totalValueLockedUSD(value: BigDecimal) {
    this.set("_totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get _largePriceChangeBuffer(): i32 {
    let value = this.get("_largePriceChangeBuffer");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set _largePriceChangeBuffer(value: i32) {
    this.set("_largePriceChangeBuffer", Value.fromI32(value));
  }

  get _largeTVLImpactBuffer(): i32 {
    let value = this.get("_largeTVLImpactBuffer");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set _largeTVLImpactBuffer(value: i32) {
    this.set("_largeTVLImpactBuffer", Value.fromI32(value));
  }

  get rewards(): RewardLoader {
    return new RewardLoader(
      "Token",
      this.get("id")!.toBytes().toHexString(),
      "rewards",
    );
  }
}

export class Reward extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Reward must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Reward", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Reward | null {
    return changetype<Reward | null>(
      store.get_in_block("Reward", id.toHexString()),
    );
  }

  static load(id: Bytes): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdBlockNumber(): BigInt {
    let value = this.get("createdBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdBlockNumber(value: BigInt) {
    this.set("createdBlockNumber", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }
}

export class PoolFee extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolFee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PoolFee must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolFee", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PoolFee | null {
    return changetype<PoolFee | null>(
      store.get_in_block("PoolFee", id.toHexString()),
    );
  }

  static load(id: Bytes): PoolFee | null {
    return changetype<PoolFee | null>(store.get("PoolFee", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get feePercentage(): BigDecimal | null {
    let value = this.get("feePercentage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set feePercentage(value: BigDecimal | null) {
    if (!value) {
      this.unset("feePercentage");
    } else {
      this.set("feePercentage", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get feeType(): string {
    let value = this.get("feeType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set feeType(value: string) {
    this.set("feeType", Value.fromString(value));
  }
}

export class DexAmmProtocol extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DexAmmProtocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DexAmmProtocol must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DexAmmProtocol", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DexAmmProtocol | null {
    return changetype<DexAmmProtocol | null>(
      store.get_in_block("DexAmmProtocol", id.toHexString()),
    );
  }

  static load(id: Bytes): DexAmmProtocol | null {
    return changetype<DexAmmProtocol | null>(
      store.get("DexAmmProtocol", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get slug(): string {
    let value = this.get("slug");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set slug(value: string) {
    this.set("slug", Value.fromString(value));
  }

  get schemaVersion(): string {
    let value = this.get("schemaVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set schemaVersion(value: string) {
    this.set("schemaVersion", Value.fromString(value));
  }

  get subgraphVersion(): string {
    let value = this.get("subgraphVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set subgraphVersion(value: string) {
    this.set("subgraphVersion", Value.fromString(value));
  }

  get methodologyVersion(): string {
    let value = this.get("methodologyVersion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set methodologyVersion(value: string) {
    this.set("methodologyVersion", Value.fromString(value));
  }

  get network(): string {
    let value = this.get("network");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set network(value: string) {
    this.set("network", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalLiquidityUSD(): BigDecimal {
    let value = this.get("totalLiquidityUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalLiquidityUSD(value: BigDecimal) {
    this.set("totalLiquidityUSD", Value.fromBigDecimal(value));
  }

  get activeLiquidityUSD(): BigDecimal {
    let value = this.get("activeLiquidityUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set activeLiquidityUSD(value: BigDecimal) {
    this.set("activeLiquidityUSD", Value.fromBigDecimal(value));
  }

  get uncollectedProtocolSideValueUSD(): BigDecimal {
    let value = this.get("uncollectedProtocolSideValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set uncollectedProtocolSideValueUSD(value: BigDecimal) {
    this.set("uncollectedProtocolSideValueUSD", Value.fromBigDecimal(value));
  }

  get uncollectedSupplySideValueUSD(): BigDecimal {
    let value = this.get("uncollectedSupplySideValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set uncollectedSupplySideValueUSD(value: BigDecimal) {
    this.set("uncollectedSupplySideValueUSD", Value.fromBigDecimal(value));
  }

  get protocolControlledValueUSD(): BigDecimal | null {
    let value = this.get("protocolControlledValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set protocolControlledValueUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("protocolControlledValueUSD");
    } else {
      this.set(
        "protocolControlledValueUSD",
        Value.fromBigDecimal(<BigDecimal>value),
      );
    }
  }

  get cumulativeVolumeUSD(): BigDecimal {
    let value = this.get("cumulativeVolumeUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeVolumeUSD(value: BigDecimal) {
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get cumulativeUniqueLPs(): i32 {
    let value = this.get("cumulativeUniqueLPs");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueLPs(value: i32) {
    this.set("cumulativeUniqueLPs", Value.fromI32(value));
  }

  get cumulativeUniqueTraders(): i32 {
    let value = this.get("cumulativeUniqueTraders");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueTraders(value: i32) {
    this.set("cumulativeUniqueTraders", Value.fromI32(value));
  }

  get totalPoolCount(): i32 {
    let value = this.get("totalPoolCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalPoolCount(value: i32) {
    this.set("totalPoolCount", Value.fromI32(value));
  }

  get openPositionCount(): i32 {
    let value = this.get("openPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set openPositionCount(value: i32) {
    this.set("openPositionCount", Value.fromI32(value));
  }

  get cumulativePositionCount(): i32 {
    let value = this.get("cumulativePositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativePositionCount(value: i32) {
    this.set("cumulativePositionCount", Value.fromI32(value));
  }

  get lastSnapshotDayID(): i32 {
    let value = this.get("lastSnapshotDayID");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastSnapshotDayID(value: i32) {
    this.set("lastSnapshotDayID", Value.fromI32(value));
  }

  get lastUpdateTimestamp(): BigInt {
    let value = this.get("lastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdateTimestamp(value: BigInt) {
    this.set("lastUpdateTimestamp", Value.fromBigInt(value));
  }

  get lastUpdateBlockNumber(): BigInt {
    let value = this.get("lastUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdateBlockNumber(value: BigInt) {
    this.set("lastUpdateBlockNumber", Value.fromBigInt(value));
  }

  get dailyUsageMetrics(): UsageMetricsDailySnapshotLoader {
    return new UsageMetricsDailySnapshotLoader(
      "DexAmmProtocol",
      this.get("id")!.toBytes().toHexString(),
      "dailyUsageMetrics",
    );
  }

  get hourlyUsageMetrics(): UsageMetricsHourlySnapshotLoader {
    return new UsageMetricsHourlySnapshotLoader(
      "DexAmmProtocol",
      this.get("id")!.toBytes().toHexString(),
      "hourlyUsageMetrics",
    );
  }

  get financialMetrics(): FinancialsDailySnapshotLoader {
    return new FinancialsDailySnapshotLoader(
      "DexAmmProtocol",
      this.get("id")!.toBytes().toHexString(),
      "financialMetrics",
    );
  }

  get pools(): PoolLoader {
    return new PoolLoader(
      "DexAmmProtocol",
      this.get("id")!.toBytes().toHexString(),
      "pools",
    );
  }

  get _regenesis(): boolean {
    let value = this.get("_regenesis");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set _regenesis(value: boolean) {
    this.set("_regenesis", Value.fromBoolean(value));
  }
}

export class UsageMetricsDailySnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UsageMetricsDailySnapshot entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UsageMetricsDailySnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UsageMetricsDailySnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UsageMetricsDailySnapshot | null {
    return changetype<UsageMetricsDailySnapshot | null>(
      store.get_in_block("UsageMetricsDailySnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): UsageMetricsDailySnapshot | null {
    return changetype<UsageMetricsDailySnapshot | null>(
      store.get("UsageMetricsDailySnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get day(): i32 {
    let value = this.get("day");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set day(value: i32) {
    this.set("day", Value.fromI32(value));
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get dailyActiveUsers(): i32 {
    let value = this.get("dailyActiveUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyActiveUsers(value: i32) {
    this.set("dailyActiveUsers", Value.fromI32(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get dailyTransactionCount(): i32 {
    let value = this.get("dailyTransactionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyTransactionCount(value: i32) {
    this.set("dailyTransactionCount", Value.fromI32(value));
  }

  get totalPoolCount(): i32 {
    let value = this.get("totalPoolCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalPoolCount(value: i32) {
    this.set("totalPoolCount", Value.fromI32(value));
  }

  get dailyDepositCount(): i32 {
    let value = this.get("dailyDepositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyDepositCount(value: i32) {
    this.set("dailyDepositCount", Value.fromI32(value));
  }

  get dailyWithdrawCount(): i32 {
    let value = this.get("dailyWithdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyWithdrawCount(value: i32) {
    this.set("dailyWithdrawCount", Value.fromI32(value));
  }

  get dailySwapCount(): i32 {
    let value = this.get("dailySwapCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailySwapCount(value: i32) {
    this.set("dailySwapCount", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class UsageMetricsHourlySnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UsageMetricsHourlySnapshot entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UsageMetricsHourlySnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UsageMetricsHourlySnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UsageMetricsHourlySnapshot | null {
    return changetype<UsageMetricsHourlySnapshot | null>(
      store.get_in_block("UsageMetricsHourlySnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): UsageMetricsHourlySnapshot | null {
    return changetype<UsageMetricsHourlySnapshot | null>(
      store.get("UsageMetricsHourlySnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hour(): i32 {
    let value = this.get("hour");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hour(value: i32) {
    this.set("hour", Value.fromI32(value));
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get hourlyActiveUsers(): i32 {
    let value = this.get("hourlyActiveUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlyActiveUsers(value: i32) {
    this.set("hourlyActiveUsers", Value.fromI32(value));
  }

  get cumulativeUniqueUsers(): i32 {
    let value = this.get("cumulativeUniqueUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeUniqueUsers(value: i32) {
    this.set("cumulativeUniqueUsers", Value.fromI32(value));
  }

  get hourlyTransactionCount(): i32 {
    let value = this.get("hourlyTransactionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlyTransactionCount(value: i32) {
    this.set("hourlyTransactionCount", Value.fromI32(value));
  }

  get hourlyDepositCount(): i32 {
    let value = this.get("hourlyDepositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlyDepositCount(value: i32) {
    this.set("hourlyDepositCount", Value.fromI32(value));
  }

  get hourlyWithdrawCount(): i32 {
    let value = this.get("hourlyWithdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlyWithdrawCount(value: i32) {
    this.set("hourlyWithdrawCount", Value.fromI32(value));
  }

  get hourlySwapCount(): i32 {
    let value = this.get("hourlySwapCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlySwapCount(value: i32) {
    this.set("hourlySwapCount", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class FinancialsDailySnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FinancialsDailySnapshot entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FinancialsDailySnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FinancialsDailySnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): FinancialsDailySnapshot | null {
    return changetype<FinancialsDailySnapshot | null>(
      store.get_in_block("FinancialsDailySnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): FinancialsDailySnapshot | null {
    return changetype<FinancialsDailySnapshot | null>(
      store.get("FinancialsDailySnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get day(): i32 {
    let value = this.get("day");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set day(value: i32) {
    this.set("day", Value.fromI32(value));
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalLiquidityUSD(): BigDecimal {
    let value = this.get("totalLiquidityUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalLiquidityUSD(value: BigDecimal) {
    this.set("totalLiquidityUSD", Value.fromBigDecimal(value));
  }

  get activeLiquidityUSD(): BigDecimal {
    let value = this.get("activeLiquidityUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set activeLiquidityUSD(value: BigDecimal) {
    this.set("activeLiquidityUSD", Value.fromBigDecimal(value));
  }

  get uncollectedProtocolSideValueUSD(): BigDecimal {
    let value = this.get("uncollectedProtocolSideValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set uncollectedProtocolSideValueUSD(value: BigDecimal) {
    this.set("uncollectedProtocolSideValueUSD", Value.fromBigDecimal(value));
  }

  get uncollectedSupplySideValueUSD(): BigDecimal {
    let value = this.get("uncollectedSupplySideValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set uncollectedSupplySideValueUSD(value: BigDecimal) {
    this.set("uncollectedSupplySideValueUSD", Value.fromBigDecimal(value));
  }

  get protocolControlledValueUSD(): BigDecimal | null {
    let value = this.get("protocolControlledValueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set protocolControlledValueUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("protocolControlledValueUSD");
    } else {
      this.set(
        "protocolControlledValueUSD",
        Value.fromBigDecimal(<BigDecimal>value),
      );
    }
  }

  get dailyVolumeUSD(): BigDecimal {
    let value = this.get("dailyVolumeUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyVolumeUSD(value: BigDecimal) {
    this.set("dailyVolumeUSD", Value.fromBigDecimal(value));
  }

  get cumulativeVolumeUSD(): BigDecimal {
    let value = this.get("cumulativeVolumeUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeVolumeUSD(value: BigDecimal) {
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(value));
  }

  get dailySupplySideRevenueUSD(): BigDecimal {
    let value = this.get("dailySupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailySupplySideRevenueUSD(value: BigDecimal) {
    this.set("dailySupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("dailyProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("dailyProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyTotalRevenueUSD(): BigDecimal {
    let value = this.get("dailyTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyTotalRevenueUSD(value: BigDecimal) {
    this.set("dailyTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Pool must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Pool", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Pool | null {
    return changetype<Pool | null>(
      store.get_in_block("Pool", id.toHexString()),
    );
  }

  static load(id: Bytes): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get liquidityToken(): Bytes | null {
    let value = this.get("liquidityToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set liquidityToken(value: Bytes | null) {
    if (!value) {
      this.unset("liquidityToken");
    } else {
      this.set("liquidityToken", Value.fromBytes(<Bytes>value));
    }
  }

  get liquidityTokenType(): string | null {
    let value = this.get("liquidityTokenType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set liquidityTokenType(value: string | null) {
    if (!value) {
      this.unset("liquidityTokenType");
    } else {
      this.set("liquidityTokenType", Value.fromString(<string>value));
    }
  }

  get inputTokens(): Array<Bytes> {
    let value = this.get("inputTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set inputTokens(value: Array<Bytes>) {
    this.set("inputTokens", Value.fromBytesArray(value));
  }

  get fees(): Array<Bytes> {
    let value = this.get("fees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set fees(value: Array<Bytes>) {
    this.set("fees", Value.fromBytesArray(value));
  }

  get isSingleSided(): boolean {
    let value = this.get("isSingleSided");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isSingleSided(value: boolean) {
    this.set("isSingleSided", Value.fromBoolean(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdBlockNumber(): BigInt {
    let value = this.get("createdBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdBlockNumber(value: BigInt) {
    this.set("createdBlockNumber", Value.fromBigInt(value));
  }

  get tick(): BigInt | null {
    let value = this.get("tick");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (!value) {
      this.unset("tick");
    } else {
      this.set("tick", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalLiquidity(): BigInt {
    let value = this.get("totalLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLiquidity(value: BigInt) {
    this.set("totalLiquidity", Value.fromBigInt(value));
  }

  get totalLiquidityUSD(): BigDecimal {
    let value = this.get("totalLiquidityUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalLiquidityUSD(value: BigDecimal) {
    this.set("totalLiquidityUSD", Value.fromBigDecimal(value));
  }

  get activeLiquidity(): BigInt {
    let value = this.get("activeLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeLiquidity(value: BigInt) {
    this.set("activeLiquidity", Value.fromBigInt(value));
  }

  get activeLiquidityUSD(): BigDecimal {
    let value = this.get("activeLiquidityUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set activeLiquidityUSD(value: BigDecimal) {
    this.set("activeLiquidityUSD", Value.fromBigDecimal(value));
  }

  get uncollectedProtocolSideTokenAmounts(): Array<BigInt> {
    let value = this.get("uncollectedProtocolSideTokenAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set uncollectedProtocolSideTokenAmounts(value: Array<BigInt>) {
    this.set(
      "uncollectedProtocolSideTokenAmounts",
      Value.fromBigIntArray(value),
    );
  }

  get uncollectedProtocolSideValuesUSD(): Array<BigDecimal> {
    let value = this.get("uncollectedProtocolSideValuesUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set uncollectedProtocolSideValuesUSD(value: Array<BigDecimal>) {
    this.set(
      "uncollectedProtocolSideValuesUSD",
      Value.fromBigDecimalArray(value),
    );
  }

  get uncollectedSupplySideTokenAmounts(): Array<BigInt> {
    let value = this.get("uncollectedSupplySideTokenAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set uncollectedSupplySideTokenAmounts(value: Array<BigInt>) {
    this.set("uncollectedSupplySideTokenAmounts", Value.fromBigIntArray(value));
  }

  get uncollectedSupplySideValuesUSD(): Array<BigDecimal> {
    let value = this.get("uncollectedSupplySideValuesUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set uncollectedSupplySideValuesUSD(value: Array<BigDecimal>) {
    this.set(
      "uncollectedSupplySideValuesUSD",
      Value.fromBigDecimalArray(value),
    );
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeVolumeByTokenAmount(): Array<BigInt> {
    let value = this.get("cumulativeVolumeByTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set cumulativeVolumeByTokenAmount(value: Array<BigInt>) {
    this.set("cumulativeVolumeByTokenAmount", Value.fromBigIntArray(value));
  }

  get cumulativeVolumeByTokenUSD(): Array<BigDecimal> {
    let value = this.get("cumulativeVolumeByTokenUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set cumulativeVolumeByTokenUSD(value: Array<BigDecimal>) {
    this.set("cumulativeVolumeByTokenUSD", Value.fromBigDecimalArray(value));
  }

  get cumulativeVolumeUSD(): BigDecimal {
    let value = this.get("cumulativeVolumeUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeVolumeUSD(value: BigDecimal) {
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(value));
  }

  get inputTokenBalances(): Array<BigInt> {
    let value = this.get("inputTokenBalances");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set inputTokenBalances(value: Array<BigInt>) {
    this.set("inputTokenBalances", Value.fromBigIntArray(value));
  }

  get inputTokenBalancesUSD(): Array<BigDecimal> {
    let value = this.get("inputTokenBalancesUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set inputTokenBalancesUSD(value: Array<BigDecimal>) {
    this.set("inputTokenBalancesUSD", Value.fromBigDecimalArray(value));
  }

  get stakedTokenAmount(): BigInt | null {
    let value = this.get("stakedTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakedTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("stakedTokenAmount");
    } else {
      this.set("stakedTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get rewardTokenEmissionsAmount(): Array<BigInt> | null {
    let value = this.get("rewardTokenEmissionsAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardTokenEmissionsAmount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsAmount");
    } else {
      this.set(
        "rewardTokenEmissionsAmount",
        Value.fromBigIntArray(<Array<BigInt>>value),
      );
    }
  }

  get rewardTokenEmissionsUSD(): Array<BigDecimal> | null {
    let value = this.get("rewardTokenEmissionsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set rewardTokenEmissionsUSD(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsUSD");
    } else {
      this.set(
        "rewardTokenEmissionsUSD",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value),
      );
    }
  }

  get cumulativeDepositCount(): i32 {
    let value = this.get("cumulativeDepositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeDepositCount(value: i32) {
    this.set("cumulativeDepositCount", Value.fromI32(value));
  }

  get cumulativeWithdrawCount(): i32 {
    let value = this.get("cumulativeWithdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeWithdrawCount(value: i32) {
    this.set("cumulativeWithdrawCount", Value.fromI32(value));
  }

  get cumulativeSwapCount(): i32 {
    let value = this.get("cumulativeSwapCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeSwapCount(value: i32) {
    this.set("cumulativeSwapCount", Value.fromI32(value));
  }

  get positions(): PositionLoader {
    return new PositionLoader(
      "Pool",
      this.get("id")!.toBytes().toHexString(),
      "positions",
    );
  }

  get positionCount(): i32 {
    let value = this.get("positionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set positionCount(value: i32) {
    this.set("positionCount", Value.fromI32(value));
  }

  get openPositionCount(): i32 {
    let value = this.get("openPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set openPositionCount(value: i32) {
    this.set("openPositionCount", Value.fromI32(value));
  }

  get closedPositionCount(): i32 {
    let value = this.get("closedPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set closedPositionCount(value: i32) {
    this.set("closedPositionCount", Value.fromI32(value));
  }

  get lastSnapshotDayID(): i32 {
    let value = this.get("lastSnapshotDayID");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastSnapshotDayID(value: i32) {
    this.set("lastSnapshotDayID", Value.fromI32(value));
  }

  get lastSnapshotHourID(): i32 {
    let value = this.get("lastSnapshotHourID");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastSnapshotHourID(value: i32) {
    this.set("lastSnapshotHourID", Value.fromI32(value));
  }

  get lastUpdateTimestamp(): BigInt {
    let value = this.get("lastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdateTimestamp(value: BigInt) {
    this.set("lastUpdateTimestamp", Value.fromBigInt(value));
  }

  get lastUpdateBlockNumber(): BigInt {
    let value = this.get("lastUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdateBlockNumber(value: BigInt) {
    this.set("lastUpdateBlockNumber", Value.fromBigInt(value));
  }

  get dailySnapshots(): PoolDailySnapshotLoader {
    return new PoolDailySnapshotLoader(
      "Pool",
      this.get("id")!.toBytes().toHexString(),
      "dailySnapshots",
    );
  }

  get hourlySnapshots(): PoolHourlySnapshotLoader {
    return new PoolHourlySnapshotLoader(
      "Pool",
      this.get("id")!.toBytes().toHexString(),
      "hourlySnapshots",
    );
  }

  get deposits(): DepositLoader {
    return new DepositLoader(
      "Pool",
      this.get("id")!.toBytes().toHexString(),
      "deposits",
    );
  }

  get withdraws(): WithdrawLoader {
    return new WithdrawLoader(
      "Pool",
      this.get("id")!.toBytes().toHexString(),
      "withdraws",
    );
  }

  get swaps(): SwapLoader {
    return new SwapLoader(
      "Pool",
      this.get("id")!.toBytes().toHexString(),
      "swaps",
    );
  }
}

export class PoolDailySnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolDailySnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PoolDailySnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolDailySnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PoolDailySnapshot | null {
    return changetype<PoolDailySnapshot | null>(
      store.get_in_block("PoolDailySnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): PoolDailySnapshot | null {
    return changetype<PoolDailySnapshot | null>(
      store.get("PoolDailySnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get day(): i32 {
    let value = this.get("day");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set day(value: i32) {
    this.set("day", Value.fromI32(value));
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get tick(): BigInt | null {
    let value = this.get("tick");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (!value) {
      this.unset("tick");
    } else {
      this.set("tick", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalLiquidity(): BigInt {
    let value = this.get("totalLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLiquidity(value: BigInt) {
    this.set("totalLiquidity", Value.fromBigInt(value));
  }

  get totalLiquidityUSD(): BigDecimal {
    let value = this.get("totalLiquidityUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalLiquidityUSD(value: BigDecimal) {
    this.set("totalLiquidityUSD", Value.fromBigDecimal(value));
  }

  get activeLiquidity(): BigInt {
    let value = this.get("activeLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeLiquidity(value: BigInt) {
    this.set("activeLiquidity", Value.fromBigInt(value));
  }

  get activeLiquidityUSD(): BigDecimal {
    let value = this.get("activeLiquidityUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set activeLiquidityUSD(value: BigDecimal) {
    this.set("activeLiquidityUSD", Value.fromBigDecimal(value));
  }

  get uncollectedProtocolSideTokenAmounts(): Array<BigInt> {
    let value = this.get("uncollectedProtocolSideTokenAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set uncollectedProtocolSideTokenAmounts(value: Array<BigInt>) {
    this.set(
      "uncollectedProtocolSideTokenAmounts",
      Value.fromBigIntArray(value),
    );
  }

  get uncollectedProtocolSideValuesUSD(): Array<BigDecimal> {
    let value = this.get("uncollectedProtocolSideValuesUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set uncollectedProtocolSideValuesUSD(value: Array<BigDecimal>) {
    this.set(
      "uncollectedProtocolSideValuesUSD",
      Value.fromBigDecimalArray(value),
    );
  }

  get uncollectedSupplySideTokenAmounts(): Array<BigInt> {
    let value = this.get("uncollectedSupplySideTokenAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set uncollectedSupplySideTokenAmounts(value: Array<BigInt>) {
    this.set("uncollectedSupplySideTokenAmounts", Value.fromBigIntArray(value));
  }

  get uncollectedSupplySideValuesUSD(): Array<BigDecimal> {
    let value = this.get("uncollectedSupplySideValuesUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set uncollectedSupplySideValuesUSD(value: Array<BigDecimal>) {
    this.set(
      "uncollectedSupplySideValuesUSD",
      Value.fromBigDecimalArray(value),
    );
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailySupplySideRevenueUSD(): BigDecimal {
    let value = this.get("dailySupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailySupplySideRevenueUSD(value: BigDecimal) {
    this.set("dailySupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("dailyProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("dailyProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get dailyTotalRevenueUSD(): BigDecimal {
    let value = this.get("dailyTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyTotalRevenueUSD(value: BigDecimal) {
    this.set("dailyTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeVolumeUSD(): BigDecimal {
    let value = this.get("cumulativeVolumeUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeVolumeUSD(value: BigDecimal) {
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(value));
  }

  get dailyVolumeUSD(): BigDecimal {
    let value = this.get("dailyVolumeUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set dailyVolumeUSD(value: BigDecimal) {
    this.set("dailyVolumeUSD", Value.fromBigDecimal(value));
  }

  get cumulativeVolumeByTokenAmount(): Array<BigInt> {
    let value = this.get("cumulativeVolumeByTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set cumulativeVolumeByTokenAmount(value: Array<BigInt>) {
    this.set("cumulativeVolumeByTokenAmount", Value.fromBigIntArray(value));
  }

  get dailyVolumeByTokenAmount(): Array<BigInt> {
    let value = this.get("dailyVolumeByTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set dailyVolumeByTokenAmount(value: Array<BigInt>) {
    this.set("dailyVolumeByTokenAmount", Value.fromBigIntArray(value));
  }

  get cumulativeVolumeByTokenUSD(): Array<BigDecimal> {
    let value = this.get("cumulativeVolumeByTokenUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set cumulativeVolumeByTokenUSD(value: Array<BigDecimal>) {
    this.set("cumulativeVolumeByTokenUSD", Value.fromBigDecimalArray(value));
  }

  get dailyVolumeByTokenUSD(): Array<BigDecimal> {
    let value = this.get("dailyVolumeByTokenUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set dailyVolumeByTokenUSD(value: Array<BigDecimal>) {
    this.set("dailyVolumeByTokenUSD", Value.fromBigDecimalArray(value));
  }

  get inputTokenBalances(): Array<BigInt> {
    let value = this.get("inputTokenBalances");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set inputTokenBalances(value: Array<BigInt>) {
    this.set("inputTokenBalances", Value.fromBigIntArray(value));
  }

  get inputTokenBalancesUSD(): Array<BigDecimal> {
    let value = this.get("inputTokenBalancesUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set inputTokenBalancesUSD(value: Array<BigDecimal>) {
    this.set("inputTokenBalancesUSD", Value.fromBigDecimalArray(value));
  }

  get stakedTokenAmount(): BigInt | null {
    let value = this.get("stakedTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakedTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("stakedTokenAmount");
    } else {
      this.set("stakedTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get rewardTokenEmissionsAmount(): Array<BigInt> | null {
    let value = this.get("rewardTokenEmissionsAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardTokenEmissionsAmount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsAmount");
    } else {
      this.set(
        "rewardTokenEmissionsAmount",
        Value.fromBigIntArray(<Array<BigInt>>value),
      );
    }
  }

  get rewardTokenEmissionsUSD(): Array<BigDecimal> | null {
    let value = this.get("rewardTokenEmissionsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set rewardTokenEmissionsUSD(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsUSD");
    } else {
      this.set(
        "rewardTokenEmissionsUSD",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value),
      );
    }
  }

  get cumulativeDepositCount(): i32 {
    let value = this.get("cumulativeDepositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeDepositCount(value: i32) {
    this.set("cumulativeDepositCount", Value.fromI32(value));
  }

  get dailyDepositCount(): i32 {
    let value = this.get("dailyDepositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyDepositCount(value: i32) {
    this.set("dailyDepositCount", Value.fromI32(value));
  }

  get cumulativeWithdrawCount(): i32 {
    let value = this.get("cumulativeWithdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeWithdrawCount(value: i32) {
    this.set("cumulativeWithdrawCount", Value.fromI32(value));
  }

  get dailyWithdrawCount(): i32 {
    let value = this.get("dailyWithdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailyWithdrawCount(value: i32) {
    this.set("dailyWithdrawCount", Value.fromI32(value));
  }

  get cumulativeSwapCount(): i32 {
    let value = this.get("cumulativeSwapCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeSwapCount(value: i32) {
    this.set("cumulativeSwapCount", Value.fromI32(value));
  }

  get dailySwapCount(): i32 {
    let value = this.get("dailySwapCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set dailySwapCount(value: i32) {
    this.set("dailySwapCount", Value.fromI32(value));
  }

  get positionCount(): i32 {
    let value = this.get("positionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set positionCount(value: i32) {
    this.set("positionCount", Value.fromI32(value));
  }

  get openPositionCount(): i32 {
    let value = this.get("openPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set openPositionCount(value: i32) {
    this.set("openPositionCount", Value.fromI32(value));
  }

  get closedPositionCount(): i32 {
    let value = this.get("closedPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set closedPositionCount(value: i32) {
    this.set("closedPositionCount", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class PoolHourlySnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolHourlySnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PoolHourlySnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PoolHourlySnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PoolHourlySnapshot | null {
    return changetype<PoolHourlySnapshot | null>(
      store.get_in_block("PoolHourlySnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): PoolHourlySnapshot | null {
    return changetype<PoolHourlySnapshot | null>(
      store.get("PoolHourlySnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hour(): i32 {
    let value = this.get("hour");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hour(value: i32) {
    this.set("hour", Value.fromI32(value));
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get tick(): BigInt | null {
    let value = this.get("tick");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (!value) {
      this.unset("tick");
    } else {
      this.set("tick", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalLiquidity(): BigInt {
    let value = this.get("totalLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLiquidity(value: BigInt) {
    this.set("totalLiquidity", Value.fromBigInt(value));
  }

  get totalLiquidityUSD(): BigDecimal {
    let value = this.get("totalLiquidityUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalLiquidityUSD(value: BigDecimal) {
    this.set("totalLiquidityUSD", Value.fromBigDecimal(value));
  }

  get activeLiquidity(): BigInt {
    let value = this.get("activeLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set activeLiquidity(value: BigInt) {
    this.set("activeLiquidity", Value.fromBigInt(value));
  }

  get activeLiquidityUSD(): BigDecimal {
    let value = this.get("activeLiquidityUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set activeLiquidityUSD(value: BigDecimal) {
    this.set("activeLiquidityUSD", Value.fromBigDecimal(value));
  }

  get uncollectedProtocolSideTokenAmounts(): Array<BigInt> {
    let value = this.get("uncollectedProtocolSideTokenAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set uncollectedProtocolSideTokenAmounts(value: Array<BigInt>) {
    this.set(
      "uncollectedProtocolSideTokenAmounts",
      Value.fromBigIntArray(value),
    );
  }

  get uncollectedProtocolSideValuesUSD(): Array<BigDecimal> {
    let value = this.get("uncollectedProtocolSideValuesUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set uncollectedProtocolSideValuesUSD(value: Array<BigDecimal>) {
    this.set(
      "uncollectedProtocolSideValuesUSD",
      Value.fromBigDecimalArray(value),
    );
  }

  get uncollectedSupplySideTokenAmounts(): Array<BigInt> {
    let value = this.get("uncollectedSupplySideTokenAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set uncollectedSupplySideTokenAmounts(value: Array<BigInt>) {
    this.set("uncollectedSupplySideTokenAmounts", Value.fromBigIntArray(value));
  }

  get uncollectedSupplySideValuesUSD(): Array<BigDecimal> {
    let value = this.get("uncollectedSupplySideValuesUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set uncollectedSupplySideValuesUSD(value: Array<BigDecimal>) {
    this.set(
      "uncollectedSupplySideValuesUSD",
      Value.fromBigDecimalArray(value),
    );
  }

  get cumulativeSupplySideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeSupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeSupplySideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeSupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get hourlySupplySideRevenueUSD(): BigDecimal {
    let value = this.get("hourlySupplySideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set hourlySupplySideRevenueUSD(value: BigDecimal) {
    this.set("hourlySupplySideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("cumulativeProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get hourlyProtocolSideRevenueUSD(): BigDecimal {
    let value = this.get("hourlyProtocolSideRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set hourlyProtocolSideRevenueUSD(value: BigDecimal) {
    this.set("hourlyProtocolSideRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeTotalRevenueUSD(): BigDecimal {
    let value = this.get("cumulativeTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeTotalRevenueUSD(value: BigDecimal) {
    this.set("cumulativeTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get hourlyTotalRevenueUSD(): BigDecimal {
    let value = this.get("hourlyTotalRevenueUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set hourlyTotalRevenueUSD(value: BigDecimal) {
    this.set("hourlyTotalRevenueUSD", Value.fromBigDecimal(value));
  }

  get cumulativeVolumeUSD(): BigDecimal {
    let value = this.get("cumulativeVolumeUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeVolumeUSD(value: BigDecimal) {
    this.set("cumulativeVolumeUSD", Value.fromBigDecimal(value));
  }

  get hourlyVolumeUSD(): BigDecimal {
    let value = this.get("hourlyVolumeUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set hourlyVolumeUSD(value: BigDecimal) {
    this.set("hourlyVolumeUSD", Value.fromBigDecimal(value));
  }

  get cumulativeVolumeByTokenAmount(): Array<BigInt> {
    let value = this.get("cumulativeVolumeByTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set cumulativeVolumeByTokenAmount(value: Array<BigInt>) {
    this.set("cumulativeVolumeByTokenAmount", Value.fromBigIntArray(value));
  }

  get hourlyVolumeByTokenAmount(): Array<BigInt> {
    let value = this.get("hourlyVolumeByTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set hourlyVolumeByTokenAmount(value: Array<BigInt>) {
    this.set("hourlyVolumeByTokenAmount", Value.fromBigIntArray(value));
  }

  get cumulativeVolumeByTokenUSD(): Array<BigDecimal> {
    let value = this.get("cumulativeVolumeByTokenUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set cumulativeVolumeByTokenUSD(value: Array<BigDecimal>) {
    this.set("cumulativeVolumeByTokenUSD", Value.fromBigDecimalArray(value));
  }

  get hourlyVolumeByTokenUSD(): Array<BigDecimal> {
    let value = this.get("hourlyVolumeByTokenUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set hourlyVolumeByTokenUSD(value: Array<BigDecimal>) {
    this.set("hourlyVolumeByTokenUSD", Value.fromBigDecimalArray(value));
  }

  get inputTokenBalances(): Array<BigInt> {
    let value = this.get("inputTokenBalances");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set inputTokenBalances(value: Array<BigInt>) {
    this.set("inputTokenBalances", Value.fromBigIntArray(value));
  }

  get inputTokenBalancesUSD(): Array<BigDecimal> {
    let value = this.get("inputTokenBalancesUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set inputTokenBalancesUSD(value: Array<BigDecimal>) {
    this.set("inputTokenBalancesUSD", Value.fromBigDecimalArray(value));
  }

  get stakedTokenAmount(): BigInt | null {
    let value = this.get("stakedTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakedTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("stakedTokenAmount");
    } else {
      this.set("stakedTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get rewardTokenEmissionsAmount(): Array<BigInt> | null {
    let value = this.get("rewardTokenEmissionsAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set rewardTokenEmissionsAmount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsAmount");
    } else {
      this.set(
        "rewardTokenEmissionsAmount",
        Value.fromBigIntArray(<Array<BigInt>>value),
      );
    }
  }

  get rewardTokenEmissionsUSD(): Array<BigDecimal> | null {
    let value = this.get("rewardTokenEmissionsUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set rewardTokenEmissionsUSD(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("rewardTokenEmissionsUSD");
    } else {
      this.set(
        "rewardTokenEmissionsUSD",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value),
      );
    }
  }

  get cumulativeDepositCount(): i32 {
    let value = this.get("cumulativeDepositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeDepositCount(value: i32) {
    this.set("cumulativeDepositCount", Value.fromI32(value));
  }

  get hourlyDepositCount(): i32 {
    let value = this.get("hourlyDepositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlyDepositCount(value: i32) {
    this.set("hourlyDepositCount", Value.fromI32(value));
  }

  get cumulativeWithdrawCount(): i32 {
    let value = this.get("cumulativeWithdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeWithdrawCount(value: i32) {
    this.set("cumulativeWithdrawCount", Value.fromI32(value));
  }

  get hourlyWithdrawCount(): i32 {
    let value = this.get("hourlyWithdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlyWithdrawCount(value: i32) {
    this.set("hourlyWithdrawCount", Value.fromI32(value));
  }

  get cumulativeSwapCount(): i32 {
    let value = this.get("cumulativeSwapCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set cumulativeSwapCount(value: i32) {
    this.set("cumulativeSwapCount", Value.fromI32(value));
  }

  get hourlySwapCount(): i32 {
    let value = this.get("hourlySwapCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hourlySwapCount(value: i32) {
    this.set("hourlySwapCount", Value.fromI32(value));
  }

  get positionCount(): i32 {
    let value = this.get("positionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set positionCount(value: i32) {
    this.set("positionCount", Value.fromI32(value));
  }

  get openPositionCount(): i32 {
    let value = this.get("openPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set openPositionCount(value: i32) {
    this.set("openPositionCount", Value.fromI32(value));
  }

  get closedPositionCount(): i32 {
    let value = this.get("closedPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set closedPositionCount(value: i32) {
    this.set("closedPositionCount", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class Tick extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tick entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Tick must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Tick", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Tick | null {
    return changetype<Tick | null>(
      store.get_in_block("Tick", id.toHexString()),
    );
  }

  static load(id: Bytes): Tick | null {
    return changetype<Tick | null>(store.get("Tick", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }

  get createdBlockNumber(): BigInt {
    let value = this.get("createdBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdBlockNumber(value: BigInt) {
    this.set("createdBlockNumber", Value.fromBigInt(value));
  }

  get prices(): Array<BigDecimal> {
    let value = this.get("prices");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set prices(value: Array<BigDecimal>) {
    this.set("prices", Value.fromBigDecimalArray(value));
  }

  get liquidityGross(): BigInt {
    let value = this.get("liquidityGross");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityGross(value: BigInt) {
    this.set("liquidityGross", Value.fromBigInt(value));
  }

  get liquidityGrossUSD(): BigDecimal {
    let value = this.get("liquidityGrossUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidityGrossUSD(value: BigDecimal) {
    this.set("liquidityGrossUSD", Value.fromBigDecimal(value));
  }

  get liquidityNet(): BigInt {
    let value = this.get("liquidityNet");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityNet(value: BigInt) {
    this.set("liquidityNet", Value.fromBigInt(value));
  }

  get liquidityNetUSD(): BigDecimal {
    let value = this.get("liquidityNetUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidityNetUSD(value: BigDecimal) {
    this.set("liquidityNetUSD", Value.fromBigDecimal(value));
  }

  get lastSnapshotDayID(): i32 {
    let value = this.get("lastSnapshotDayID");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastSnapshotDayID(value: i32) {
    this.set("lastSnapshotDayID", Value.fromI32(value));
  }

  get lastSnapshotHourID(): i32 {
    let value = this.get("lastSnapshotHourID");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastSnapshotHourID(value: i32) {
    this.set("lastSnapshotHourID", Value.fromI32(value));
  }

  get lastUpdateTimestamp(): BigInt {
    let value = this.get("lastUpdateTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdateTimestamp(value: BigInt) {
    this.set("lastUpdateTimestamp", Value.fromBigInt(value));
  }

  get lastUpdateBlockNumber(): BigInt {
    let value = this.get("lastUpdateBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdateBlockNumber(value: BigInt) {
    this.set("lastUpdateBlockNumber", Value.fromBigInt(value));
  }
}

export class TickDailySnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TickDailySnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TickDailySnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TickDailySnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TickDailySnapshot | null {
    return changetype<TickDailySnapshot | null>(
      store.get_in_block("TickDailySnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): TickDailySnapshot | null {
    return changetype<TickDailySnapshot | null>(
      store.get("TickDailySnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get day(): i32 {
    let value = this.get("day");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set day(value: i32) {
    this.set("day", Value.fromI32(value));
  }

  get tick(): Bytes {
    let value = this.get("tick");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tick(value: Bytes) {
    this.set("tick", Value.fromBytes(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get liquidityGross(): BigInt {
    let value = this.get("liquidityGross");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityGross(value: BigInt) {
    this.set("liquidityGross", Value.fromBigInt(value));
  }

  get liquidityGrossUSD(): BigDecimal {
    let value = this.get("liquidityGrossUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidityGrossUSD(value: BigDecimal) {
    this.set("liquidityGrossUSD", Value.fromBigDecimal(value));
  }

  get liquidityNet(): BigInt {
    let value = this.get("liquidityNet");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityNet(value: BigInt) {
    this.set("liquidityNet", Value.fromBigInt(value));
  }

  get liquidityNetUSD(): BigDecimal {
    let value = this.get("liquidityNetUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidityNetUSD(value: BigDecimal) {
    this.set("liquidityNetUSD", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class TickHourlySnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TickHourlySnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TickHourlySnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TickHourlySnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TickHourlySnapshot | null {
    return changetype<TickHourlySnapshot | null>(
      store.get_in_block("TickHourlySnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): TickHourlySnapshot | null {
    return changetype<TickHourlySnapshot | null>(
      store.get("TickHourlySnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hour(): i32 {
    let value = this.get("hour");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set hour(value: i32) {
    this.set("hour", Value.fromI32(value));
  }

  get tick(): Bytes {
    let value = this.get("tick");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tick(value: Bytes) {
    this.set("tick", Value.fromBytes(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get liquidityGross(): BigInt {
    let value = this.get("liquidityGross");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityGross(value: BigInt) {
    this.set("liquidityGross", Value.fromBigInt(value));
  }

  get liquidityGrossUSD(): BigDecimal {
    let value = this.get("liquidityGrossUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidityGrossUSD(value: BigDecimal) {
    this.set("liquidityGrossUSD", Value.fromBigDecimal(value));
  }

  get liquidityNet(): BigInt {
    let value = this.get("liquidityNet");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidityNet(value: BigInt) {
    this.set("liquidityNet", Value.fromBigInt(value));
  }

  get liquidityNetUSD(): BigDecimal {
    let value = this.get("liquidityNetUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidityNetUSD(value: BigDecimal) {
    this.set("liquidityNetUSD", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class Account extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Account must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Account", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Account | null {
    return changetype<Account | null>(
      store.get_in_block("Account", id.toHexString()),
    );
  }

  static load(id: Bytes): Account | null {
    return changetype<Account | null>(store.get("Account", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get positionCount(): i32 {
    let value = this.get("positionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set positionCount(value: i32) {
    this.set("positionCount", Value.fromI32(value));
  }

  get positions(): PositionLoader {
    return new PositionLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "positions",
    );
  }

  get openPositionCount(): i32 {
    let value = this.get("openPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set openPositionCount(value: i32) {
    this.set("openPositionCount", Value.fromI32(value));
  }

  get closedPositionCount(): i32 {
    let value = this.get("closedPositionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set closedPositionCount(value: i32) {
    this.set("closedPositionCount", Value.fromI32(value));
  }

  get depositCount(): i32 {
    let value = this.get("depositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set depositCount(value: i32) {
    this.set("depositCount", Value.fromI32(value));
  }

  get deposits(): DepositLoader {
    return new DepositLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "deposits",
    );
  }

  get withdrawCount(): i32 {
    let value = this.get("withdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set withdrawCount(value: i32) {
    this.set("withdrawCount", Value.fromI32(value));
  }

  get withdraws(): WithdrawLoader {
    return new WithdrawLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "withdraws",
    );
  }

  get swapCount(): i32 {
    let value = this.get("swapCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set swapCount(value: i32) {
    this.set("swapCount", Value.fromI32(value));
  }

  get swaps(): SwapLoader {
    return new SwapLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "swaps",
    );
  }

  get rewards(): RewardLoader {
    return new RewardLoader(
      "Account",
      this.get("id")!.toBytes().toHexString(),
      "rewards",
    );
  }
}

export class Position extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Position entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Position must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Position", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Position | null {
    return changetype<Position | null>(
      store.get_in_block("Position", id.toHexString()),
    );
  }

  static load(id: Bytes): Position | null {
    return changetype<Position | null>(store.get("Position", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get isStaked(): boolean {
    let value = this.get("isStaked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isStaked(value: boolean) {
    this.set("isStaked", Value.fromBoolean(value));
  }

  get hashOpened(): Bytes {
    let value = this.get("hashOpened");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hashOpened(value: Bytes) {
    this.set("hashOpened", Value.fromBytes(value));
  }

  get hashClosed(): Bytes | null {
    let value = this.get("hashClosed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set hashClosed(value: Bytes | null) {
    if (!value) {
      this.unset("hashClosed");
    } else {
      this.set("hashClosed", Value.fromBytes(<Bytes>value));
    }
  }

  get blockNumberOpened(): BigInt {
    let value = this.get("blockNumberOpened");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumberOpened(value: BigInt) {
    this.set("blockNumberOpened", Value.fromBigInt(value));
  }

  get timestampOpened(): BigInt {
    let value = this.get("timestampOpened");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestampOpened(value: BigInt) {
    this.set("timestampOpened", Value.fromBigInt(value));
  }

  get blockNumberClosed(): BigInt | null {
    let value = this.get("blockNumberClosed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockNumberClosed(value: BigInt | null) {
    if (!value) {
      this.unset("blockNumberClosed");
    } else {
      this.set("blockNumberClosed", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestampClosed(): BigInt | null {
    let value = this.get("timestampClosed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestampClosed(value: BigInt | null) {
    if (!value) {
      this.unset("timestampClosed");
    } else {
      this.set("timestampClosed", Value.fromBigInt(<BigInt>value));
    }
  }

  get tickLower(): Bytes | null {
    let value = this.get("tickLower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tickLower(value: Bytes | null) {
    if (!value) {
      this.unset("tickLower");
    } else {
      this.set("tickLower", Value.fromBytes(<Bytes>value));
    }
  }

  get tickUpper(): Bytes | null {
    let value = this.get("tickUpper");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tickUpper(value: Bytes | null) {
    if (!value) {
      this.unset("tickUpper");
    } else {
      this.set("tickUpper", Value.fromBytes(<Bytes>value));
    }
  }

  get liquidityToken(): Bytes | null {
    let value = this.get("liquidityToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set liquidityToken(value: Bytes | null) {
    if (!value) {
      this.unset("liquidityToken");
    } else {
      this.set("liquidityToken", Value.fromBytes(<Bytes>value));
    }
  }

  get liquidityTokenType(): string | null {
    let value = this.get("liquidityTokenType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set liquidityTokenType(value: string | null) {
    if (!value) {
      this.unset("liquidityTokenType");
    } else {
      this.set("liquidityTokenType", Value.fromString(<string>value));
    }
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get liquidityUSD(): BigDecimal {
    let value = this.get("liquidityUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidityUSD(value: BigDecimal) {
    this.set("liquidityUSD", Value.fromBigDecimal(value));
  }

  get cumulativeDepositTokenAmounts(): Array<BigInt> {
    let value = this.get("cumulativeDepositTokenAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set cumulativeDepositTokenAmounts(value: Array<BigInt>) {
    this.set("cumulativeDepositTokenAmounts", Value.fromBigIntArray(value));
  }

  get cumulativeDepositUSD(): BigDecimal {
    let value = this.get("cumulativeDepositUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeDepositUSD(value: BigDecimal) {
    this.set("cumulativeDepositUSD", Value.fromBigDecimal(value));
  }

  get cumulativeWithdrawTokenAmounts(): Array<BigInt> {
    let value = this.get("cumulativeWithdrawTokenAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set cumulativeWithdrawTokenAmounts(value: Array<BigInt>) {
    this.set("cumulativeWithdrawTokenAmounts", Value.fromBigIntArray(value));
  }

  get cumulativeWithdrawUSD(): BigDecimal {
    let value = this.get("cumulativeWithdrawUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeWithdrawUSD(value: BigDecimal) {
    this.set("cumulativeWithdrawUSD", Value.fromBigDecimal(value));
  }

  get cumulativeRewardUSD(): Array<BigInt> | null {
    let value = this.get("cumulativeRewardUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set cumulativeRewardUSD(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("cumulativeRewardUSD");
    } else {
      this.set(
        "cumulativeRewardUSD",
        Value.fromBigIntArray(<Array<BigInt>>value),
      );
    }
  }

  get depositCount(): i32 {
    let value = this.get("depositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set depositCount(value: i32) {
    this.set("depositCount", Value.fromI32(value));
  }

  get deposits(): DepositLoader {
    return new DepositLoader(
      "Position",
      this.get("id")!.toBytes().toHexString(),
      "deposits",
    );
  }

  get withdrawCount(): i32 {
    let value = this.get("withdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set withdrawCount(value: i32) {
    this.set("withdrawCount", Value.fromI32(value));
  }

  get withdraws(): WithdrawLoader {
    return new WithdrawLoader(
      "Position",
      this.get("id")!.toBytes().toHexString(),
      "withdraws",
    );
  }

  get snapshots(): PositionSnapshotLoader {
    return new PositionSnapshotLoader(
      "Position",
      this.get("id")!.toBytes().toHexString(),
      "snapshots",
    );
  }
}

export class PositionSnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PositionSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PositionSnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PositionSnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PositionSnapshot | null {
    return changetype<PositionSnapshot | null>(
      store.get_in_block("PositionSnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): PositionSnapshot | null {
    return changetype<PositionSnapshot | null>(
      store.get("PositionSnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get position(): Bytes {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set position(value: Bytes) {
    this.set("position", Value.fromBytes(value));
  }

  get liquidityTokenType(): string | null {
    let value = this.get("liquidityTokenType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set liquidityTokenType(value: string | null) {
    if (!value) {
      this.unset("liquidityTokenType");
    } else {
      this.set("liquidityTokenType", Value.fromString(<string>value));
    }
  }

  get liquidity(): BigInt | null {
    let value = this.get("liquidity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidity(value: BigInt | null) {
    if (!value) {
      this.unset("liquidity");
    } else {
      this.set("liquidity", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidityUSD(): BigDecimal | null {
    let value = this.get("liquidityUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidityUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("liquidityUSD");
    } else {
      this.set("liquidityUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get cumulativeDepositTokenAmounts(): Array<BigInt> {
    let value = this.get("cumulativeDepositTokenAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set cumulativeDepositTokenAmounts(value: Array<BigInt>) {
    this.set("cumulativeDepositTokenAmounts", Value.fromBigIntArray(value));
  }

  get cumulativeDepositUSD(): BigDecimal {
    let value = this.get("cumulativeDepositUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeDepositUSD(value: BigDecimal) {
    this.set("cumulativeDepositUSD", Value.fromBigDecimal(value));
  }

  get cumulativeWithdrawTokenAmounts(): Array<BigInt> {
    let value = this.get("cumulativeWithdrawTokenAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set cumulativeWithdrawTokenAmounts(value: Array<BigInt>) {
    this.set("cumulativeWithdrawTokenAmounts", Value.fromBigIntArray(value));
  }

  get cumulativeWithdrawUSD(): BigDecimal {
    let value = this.get("cumulativeWithdrawUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cumulativeWithdrawUSD(value: BigDecimal) {
    this.set("cumulativeWithdrawUSD", Value.fromBigDecimal(value));
  }

  get cumulativeRewardTokenAmounts(): Array<BigInt> | null {
    let value = this.get("cumulativeRewardTokenAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set cumulativeRewardTokenAmounts(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("cumulativeRewardTokenAmounts");
    } else {
      this.set(
        "cumulativeRewardTokenAmounts",
        Value.fromBigIntArray(<Array<BigInt>>value),
      );
    }
  }

  get cumulativeRewardUSD(): Array<BigInt> | null {
    let value = this.get("cumulativeRewardUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set cumulativeRewardUSD(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("cumulativeRewardUSD");
    } else {
      this.set(
        "cumulativeRewardUSD",
        Value.fromBigIntArray(<Array<BigInt>>value),
      );
    }
  }

  get depositCount(): i32 {
    let value = this.get("depositCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set depositCount(value: i32) {
    this.set("depositCount", Value.fromI32(value));
  }

  get withdrawCount(): i32 {
    let value = this.get("withdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set withdrawCount(value: i32) {
    this.set("withdrawCount", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Deposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Deposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Deposit", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Deposit | null {
    return changetype<Deposit | null>(
      store.get_in_block("Deposit", id.toHexString()),
    );
  }

  static load(id: Bytes): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get gasLimit(): BigInt | null {
    let value = this.get("gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasLimit(value: BigInt | null) {
    if (!value) {
      this.unset("gasLimit");
    } else {
      this.set("gasLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get position(): Bytes | null {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set position(value: Bytes | null) {
    if (!value) {
      this.unset("position");
    } else {
      this.set("position", Value.fromBytes(<Bytes>value));
    }
  }

  get pool(): Bytes {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get tickLower(): BigInt | null {
    let value = this.get("tickLower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tickLower(value: BigInt | null) {
    if (!value) {
      this.unset("tickLower");
    } else {
      this.set("tickLower", Value.fromBigInt(<BigInt>value));
    }
  }

  get tickUpper(): BigInt | null {
    let value = this.get("tickUpper");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tickUpper(value: BigInt | null) {
    if (!value) {
      this.unset("tickUpper");
    } else {
      this.set("tickUpper", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get inputTokens(): Array<Bytes> {
    let value = this.get("inputTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set inputTokens(value: Array<Bytes>) {
    this.set("inputTokens", Value.fromBytesArray(value));
  }

  get inputTokenAmounts(): Array<BigInt> {
    let value = this.get("inputTokenAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set inputTokenAmounts(value: Array<BigInt>) {
    this.set("inputTokenAmounts", Value.fromBigIntArray(value));
  }

  get reserveAmounts(): Array<BigInt> | null {
    let value = this.get("reserveAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set reserveAmounts(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("reserveAmounts");
    } else {
      this.set("reserveAmounts", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdraw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Withdraw must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Withdraw", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Withdraw | null {
    return changetype<Withdraw | null>(
      store.get_in_block("Withdraw", id.toHexString()),
    );
  }

  static load(id: Bytes): Withdraw | null {
    return changetype<Withdraw | null>(store.get("Withdraw", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get gasLimit(): BigInt | null {
    let value = this.get("gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasLimit(value: BigInt | null) {
    if (!value) {
      this.unset("gasLimit");
    } else {
      this.set("gasLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get position(): Bytes | null {
    let value = this.get("position");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set position(value: Bytes | null) {
    if (!value) {
      this.unset("position");
    } else {
      this.set("position", Value.fromBytes(<Bytes>value));
    }
  }

  get tickLower(): BigInt | null {
    let value = this.get("tickLower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tickLower(value: BigInt | null) {
    if (!value) {
      this.unset("tickLower");
    } else {
      this.set("tickLower", Value.fromBigInt(<BigInt>value));
    }
  }

  get tickUpper(): BigInt | null {
    let value = this.get("tickUpper");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tickUpper(value: BigInt | null) {
    if (!value) {
      this.unset("tickUpper");
    } else {
      this.set("tickUpper", Value.fromBigInt(<BigInt>value));
    }
  }

  get pool(): Bytes {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get inputTokens(): Array<Bytes> {
    let value = this.get("inputTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set inputTokens(value: Array<Bytes>) {
    this.set("inputTokens", Value.fromBytesArray(value));
  }

  get inputTokenAmounts(): Array<BigInt> {
    let value = this.get("inputTokenAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set inputTokenAmounts(value: Array<BigInt>) {
    this.set("inputTokenAmounts", Value.fromBigIntArray(value));
  }

  get reserveAmounts(): Array<BigInt> | null {
    let value = this.get("reserveAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set reserveAmounts(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("reserveAmounts");
    } else {
      this.set("reserveAmounts", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get amountUSD(): BigDecimal {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal) {
    this.set("amountUSD", Value.fromBigDecimal(value));
  }
}

export class Swap extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Swap must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Swap", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Swap | null {
    return changetype<Swap | null>(
      store.get_in_block("Swap", id.toHexString()),
    );
  }

  static load(id: Bytes): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get gasLimit(): BigInt | null {
    let value = this.get("gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasLimit(value: BigInt | null) {
    if (!value) {
      this.unset("gasLimit");
    } else {
      this.set("gasLimit", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (!value) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get protocol(): Bytes {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set protocol(value: Bytes) {
    this.set("protocol", Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get pool(): Bytes {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool(value: Bytes) {
    this.set("pool", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get tick(): BigInt | null {
    let value = this.get("tick");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tick(value: BigInt | null) {
    if (!value) {
      this.unset("tick");
    } else {
      this.set("tick", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get amountInUSD(): BigDecimal {
    let value = this.get("amountInUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amountInUSD(value: BigDecimal) {
    this.set("amountInUSD", Value.fromBigDecimal(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get amountOutUSD(): BigDecimal {
    let value = this.get("amountOutUSD");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amountOutUSD(value: BigDecimal) {
    this.set("amountOutUSD", Value.fromBigDecimal(value));
  }

  get reserveAmounts(): Array<BigInt> | null {
    let value = this.get("reserveAmounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set reserveAmounts(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("reserveAmounts");
    } else {
      this.set("reserveAmounts", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }
}

export class ActiveAccount extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ActiveAccount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ActiveAccount must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ActiveAccount", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ActiveAccount | null {
    return changetype<ActiveAccount | null>(
      store.get_in_block("ActiveAccount", id.toHexString()),
    );
  }

  static load(id: Bytes): ActiveAccount | null {
    return changetype<ActiveAccount | null>(
      store.get("ActiveAccount", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }
}

export class _HelperStore extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save _HelperStore entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type _HelperStore must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("_HelperStore", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): _HelperStore | null {
    return changetype<_HelperStore | null>(
      store.get_in_block("_HelperStore", id.toHexString()),
    );
  }

  static load(id: Bytes): _HelperStore | null {
    return changetype<_HelperStore | null>(
      store.get("_HelperStore", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get valueDecimalList(): Array<BigDecimal> | null {
    let value = this.get("valueDecimalList");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimalArray();
    }
  }

  set valueDecimalList(value: Array<BigDecimal> | null) {
    if (!value) {
      this.unset("valueDecimalList");
    } else {
      this.set(
        "valueDecimalList",
        Value.fromBigDecimalArray(<Array<BigDecimal>>value),
      );
    }
  }

  get valueDecimal(): BigDecimal | null {
    let value = this.get("valueDecimal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set valueDecimal(value: BigDecimal | null) {
    if (!value) {
      this.unset("valueDecimal");
    } else {
      this.set("valueDecimal", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get valueInt(): i32 {
    let value = this.get("valueInt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set valueInt(value: i32) {
    this.set("valueInt", Value.fromI32(value));
  }
}

export class RewardLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Reward[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Reward[]>(value);
  }
}

export class UsageMetricsDailySnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UsageMetricsDailySnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UsageMetricsDailySnapshot[]>(value);
  }
}

export class UsageMetricsHourlySnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UsageMetricsHourlySnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UsageMetricsHourlySnapshot[]>(value);
  }
}

export class FinancialsDailySnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): FinancialsDailySnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<FinancialsDailySnapshot[]>(value);
  }
}

export class PoolLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Pool[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Pool[]>(value);
  }
}

export class PositionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Position[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Position[]>(value);
  }
}

export class PoolDailySnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PoolDailySnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PoolDailySnapshot[]>(value);
  }
}

export class PoolHourlySnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PoolHourlySnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PoolHourlySnapshot[]>(value);
  }
}

export class DepositLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Deposit[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Deposit[]>(value);
  }
}

export class WithdrawLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Withdraw[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Withdraw[]>(value);
  }
}

export class SwapLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Swap[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Swap[]>(value);
  }
}

export class PositionSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): PositionSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<PositionSnapshot[]>(value);
  }
}
