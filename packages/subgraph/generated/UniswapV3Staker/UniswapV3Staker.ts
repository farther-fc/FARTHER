// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class DepositTransferred extends ethereum.Event {
  get params(): DepositTransferred__Params {
    return new DepositTransferred__Params(this);
  }
}

export class DepositTransferred__Params {
  _event: DepositTransferred;

  constructor(event: DepositTransferred) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class IncentiveCreated extends ethereum.Event {
  get params(): IncentiveCreated__Params {
    return new IncentiveCreated__Params(this);
  }
}

export class IncentiveCreated__Params {
  _event: IncentiveCreated;

  constructor(event: IncentiveCreated) {
    this._event = event;
  }

  get rewardToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get startTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get refundee(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class IncentiveEnded extends ethereum.Event {
  get params(): IncentiveEnded__Params {
    return new IncentiveEnded__Params(this);
  }
}

export class IncentiveEnded__Params {
  _event: IncentiveEnded;

  constructor(event: IncentiveEnded) {
    this._event = event;
  }

  get incentiveId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get refund(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardClaimed extends ethereum.Event {
  get params(): RewardClaimed__Params {
    return new RewardClaimed__Params(this);
  }
}

export class RewardClaimed__Params {
  _event: RewardClaimed;

  constructor(event: RewardClaimed) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenStaked extends ethereum.Event {
  get params(): TokenStaked__Params {
    return new TokenStaked__Params(this);
  }
}

export class TokenStaked__Params {
  _event: TokenStaked;

  constructor(event: TokenStaked) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get incentiveId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get liquidity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenUnstaked extends ethereum.Event {
  get params(): TokenUnstaked__Params {
    return new TokenUnstaked__Params(this);
  }
}

export class TokenUnstaked__Params {
  _event: TokenUnstaked;

  constructor(event: TokenUnstaked) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get incentiveId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class UniswapV3Staker__depositsResult {
  value0: Address;
  value1: BigInt;
  value2: i32;
  value3: i32;

  constructor(value0: Address, value1: BigInt, value2: i32, value3: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromI32(this.value2));
    map.set("value3", ethereum.Value.fromI32(this.value3));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getNumberOfStakes(): BigInt {
    return this.value1;
  }

  getTickLower(): i32 {
    return this.value2;
  }

  getTickUpper(): i32 {
    return this.value3;
  }
}

export class UniswapV3Staker__endIncentiveInputKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get pool(): Address {
    return this[1].toAddress();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get refundee(): Address {
    return this[4].toAddress();
  }
}

export class UniswapV3Staker__getRewardInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReward(): BigInt {
    return this.value0;
  }

  getSecondsInsideX128(): BigInt {
    return this.value1;
  }
}

export class UniswapV3Staker__getRewardInfoInputKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get pool(): Address {
    return this[1].toAddress();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get refundee(): Address {
    return this[4].toAddress();
  }
}

export class UniswapV3Staker__incentivesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTotalRewardUnclaimed(): BigInt {
    return this.value0;
  }

  getTotalSecondsClaimedX128(): BigInt {
    return this.value1;
  }

  getNumberOfStakes(): BigInt {
    return this.value2;
  }
}

export class UniswapV3Staker__stakesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getSecondsPerLiquidityInsideInitialX128(): BigInt {
    return this.value0;
  }

  getLiquidity(): BigInt {
    return this.value1;
  }
}

export class UniswapV3Staker extends ethereum.SmartContract {
  static bind(address: Address): UniswapV3Staker {
    return new UniswapV3Staker("UniswapV3Staker", address);
  }

  claimReward(
    rewardToken: Address,
    to: Address,
    amountRequested: BigInt,
  ): BigInt {
    let result = super.call(
      "claimReward",
      "claimReward(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amountRequested),
      ],
    );

    return result[0].toBigInt();
  }

  try_claimReward(
    rewardToken: Address,
    to: Address,
    amountRequested: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimReward",
      "claimReward(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(rewardToken),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amountRequested),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposits(param0: BigInt): UniswapV3Staker__depositsResult {
    let result = super.call(
      "deposits",
      "deposits(uint256):(address,uint48,int24,int24)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new UniswapV3Staker__depositsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toI32(),
    );
  }

  try_deposits(
    param0: BigInt,
  ): ethereum.CallResult<UniswapV3Staker__depositsResult> {
    let result = super.tryCall(
      "deposits",
      "deposits(uint256):(address,uint48,int24,int24)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UniswapV3Staker__depositsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toI32(),
      ),
    );
  }

  endIncentive(key: UniswapV3Staker__endIncentiveInputKeyStruct): BigInt {
    let result = super.call(
      "endIncentive",
      "endIncentive((address,address,uint256,uint256,address)):(uint256)",
      [ethereum.Value.fromTuple(key)],
    );

    return result[0].toBigInt();
  }

  try_endIncentive(
    key: UniswapV3Staker__endIncentiveInputKeyStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "endIncentive",
      "endIncentive((address,address,uint256,uint256,address)):(uint256)",
      [ethereum.Value.fromTuple(key)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRewardInfo(
    key: UniswapV3Staker__getRewardInfoInputKeyStruct,
    tokenId: BigInt,
  ): UniswapV3Staker__getRewardInfoResult {
    let result = super.call(
      "getRewardInfo",
      "getRewardInfo((address,address,uint256,uint256,address),uint256):(uint256,uint160)",
      [
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );

    return new UniswapV3Staker__getRewardInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getRewardInfo(
    key: UniswapV3Staker__getRewardInfoInputKeyStruct,
    tokenId: BigInt,
  ): ethereum.CallResult<UniswapV3Staker__getRewardInfoResult> {
    let result = super.tryCall(
      "getRewardInfo",
      "getRewardInfo((address,address,uint256,uint256,address),uint256):(uint256,uint160)",
      [
        ethereum.Value.fromTuple(key),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UniswapV3Staker__getRewardInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  incentives(param0: Bytes): UniswapV3Staker__incentivesResult {
    let result = super.call(
      "incentives",
      "incentives(bytes32):(uint256,uint160,uint96)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new UniswapV3Staker__incentivesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_incentives(
    param0: Bytes,
  ): ethereum.CallResult<UniswapV3Staker__incentivesResult> {
    let result = super.tryCall(
      "incentives",
      "incentives(bytes32):(uint256,uint160,uint96)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UniswapV3Staker__incentivesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  maxIncentiveDuration(): BigInt {
    let result = super.call(
      "maxIncentiveDuration",
      "maxIncentiveDuration():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxIncentiveDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxIncentiveDuration",
      "maxIncentiveDuration():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxIncentiveStartLeadTime(): BigInt {
    let result = super.call(
      "maxIncentiveStartLeadTime",
      "maxIncentiveStartLeadTime():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxIncentiveStartLeadTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxIncentiveStartLeadTime",
      "maxIncentiveStartLeadTime():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonfungiblePositionManager(): Address {
    let result = super.call(
      "nonfungiblePositionManager",
      "nonfungiblePositionManager():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_nonfungiblePositionManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nonfungiblePositionManager",
      "nonfungiblePositionManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC721Received(
    param0: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  rewards(param0: Address, param1: Address): BigInt {
    let result = super.call("rewards", "rewards(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1),
    ]);

    return result[0].toBigInt();
  }

  try_rewards(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewards",
      "rewards(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakes(tokenId: BigInt, incentiveId: Bytes): UniswapV3Staker__stakesResult {
    let result = super.call(
      "stakes",
      "stakes(uint256,bytes32):(uint160,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromFixedBytes(incentiveId),
      ],
    );

    return new UniswapV3Staker__stakesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_stakes(
    tokenId: BigInt,
    incentiveId: Bytes,
  ): ethereum.CallResult<UniswapV3Staker__stakesResult> {
    let result = super.tryCall(
      "stakes",
      "stakes(uint256,bytes32):(uint160,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromFixedBytes(incentiveId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new UniswapV3Staker__stakesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nonfungiblePositionManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _maxIncentiveStartLeadTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxIncentiveDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimRewardCall extends ethereum.Call {
  get inputs(): ClaimRewardCall__Inputs {
    return new ClaimRewardCall__Inputs(this);
  }

  get outputs(): ClaimRewardCall__Outputs {
    return new ClaimRewardCall__Outputs(this);
  }
}

export class ClaimRewardCall__Inputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amountRequested(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ClaimRewardCall__Outputs {
  _call: ClaimRewardCall;

  constructor(call: ClaimRewardCall) {
    this._call = call;
  }

  get reward(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateIncentiveCall extends ethereum.Call {
  get inputs(): CreateIncentiveCall__Inputs {
    return new CreateIncentiveCall__Inputs(this);
  }

  get outputs(): CreateIncentiveCall__Outputs {
    return new CreateIncentiveCall__Outputs(this);
  }
}

export class CreateIncentiveCall__Inputs {
  _call: CreateIncentiveCall;

  constructor(call: CreateIncentiveCall) {
    this._call = call;
  }

  get key(): CreateIncentiveCallKeyStruct {
    return changetype<CreateIncentiveCallKeyStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get reward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateIncentiveCall__Outputs {
  _call: CreateIncentiveCall;

  constructor(call: CreateIncentiveCall) {
    this._call = call;
  }
}

export class CreateIncentiveCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get pool(): Address {
    return this[1].toAddress();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get refundee(): Address {
    return this[4].toAddress();
  }
}

export class EndIncentiveCall extends ethereum.Call {
  get inputs(): EndIncentiveCall__Inputs {
    return new EndIncentiveCall__Inputs(this);
  }

  get outputs(): EndIncentiveCall__Outputs {
    return new EndIncentiveCall__Outputs(this);
  }
}

export class EndIncentiveCall__Inputs {
  _call: EndIncentiveCall;

  constructor(call: EndIncentiveCall) {
    this._call = call;
  }

  get key(): EndIncentiveCallKeyStruct {
    return changetype<EndIncentiveCallKeyStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class EndIncentiveCall__Outputs {
  _call: EndIncentiveCall;

  constructor(call: EndIncentiveCall) {
    this._call = call;
  }

  get refund(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EndIncentiveCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get pool(): Address {
    return this[1].toAddress();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get refundee(): Address {
    return this[4].toAddress();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class StakeTokenCall extends ethereum.Call {
  get inputs(): StakeTokenCall__Inputs {
    return new StakeTokenCall__Inputs(this);
  }

  get outputs(): StakeTokenCall__Outputs {
    return new StakeTokenCall__Outputs(this);
  }
}

export class StakeTokenCall__Inputs {
  _call: StakeTokenCall;

  constructor(call: StakeTokenCall) {
    this._call = call;
  }

  get key(): StakeTokenCallKeyStruct {
    return changetype<StakeTokenCallKeyStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeTokenCall__Outputs {
  _call: StakeTokenCall;

  constructor(call: StakeTokenCall) {
    this._call = call;
  }
}

export class StakeTokenCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get pool(): Address {
    return this[1].toAddress();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get refundee(): Address {
    return this[4].toAddress();
  }
}

export class TransferDepositCall extends ethereum.Call {
  get inputs(): TransferDepositCall__Inputs {
    return new TransferDepositCall__Inputs(this);
  }

  get outputs(): TransferDepositCall__Outputs {
    return new TransferDepositCall__Outputs(this);
  }
}

export class TransferDepositCall__Inputs {
  _call: TransferDepositCall;

  constructor(call: TransferDepositCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferDepositCall__Outputs {
  _call: TransferDepositCall;

  constructor(call: TransferDepositCall) {
    this._call = call;
  }
}

export class UnstakeTokenCall extends ethereum.Call {
  get inputs(): UnstakeTokenCall__Inputs {
    return new UnstakeTokenCall__Inputs(this);
  }

  get outputs(): UnstakeTokenCall__Outputs {
    return new UnstakeTokenCall__Outputs(this);
  }
}

export class UnstakeTokenCall__Inputs {
  _call: UnstakeTokenCall;

  constructor(call: UnstakeTokenCall) {
    this._call = call;
  }

  get key(): UnstakeTokenCallKeyStruct {
    return changetype<UnstakeTokenCallKeyStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnstakeTokenCall__Outputs {
  _call: UnstakeTokenCall;

  constructor(call: UnstakeTokenCall) {
    this._call = call;
  }
}

export class UnstakeTokenCallKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get pool(): Address {
    return this[1].toAddress();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get refundee(): Address {
    return this[4].toAddress();
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
